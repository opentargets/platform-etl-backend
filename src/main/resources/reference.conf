spark-uri = null

common {
  additional-outputs = []
  output-format = "parquet"
  path = "gs://open-targets-pre-data-releases/etl_test"
  metadata {
    write-mode = "append"
    output {
      format = "json"
      path = ${common.path}"/metadata/"
    }
  }
}

etl-dag {
  resolve: false
  steps = [
    {step: "disease", dependencies: []},
    {step: "reactome", dependencies: []},
    {step: "expression", dependencies: []},
    {step: "pharmacogenomics", dependencies: ["drug"]},
    {step: "go", dependencies: []},
    {step: "target", dependencies: ["reactome"]},
    {step: "search_facet", dependencies: ["target", "disease", "go"]},
    {step: "interaction", dependencies: ["target"]},
    {step: "target_validation", dependencies: ["target"]},
    {step: "evidence", dependencies: ["disease", "target", "drug"]},
    {step: "association", dependencies: ["evidence", "disease"]},
    {step: "association_otf", dependencies: ["evidence", "target", "disease", "reactome"]},
    {step: "search", dependencies: ["target", "drug", "evidence", "association", "disease"]},
    {step: "drug", dependencies: ["target", "disease"]},
    {step: "literature", dependencies: ["drug", "disease", "target", "evidence"]},
    {step: "known_drug", dependencies: ["target", "disease", "drug", "evidence"]},
    {step: "search_ebi", dependencies: ["target", "disease", "evidence", "association"]},
    {step: "fda", dependencies: ["drug"]},
    {step: "otar", dependencies: ["disease"]},
    {step: "target_engine", dependencies: ["target", "drug"]}
  ]
}

spark-settings {
  ignore-if-exists = true  # stop step early if write-mode is ignore and files exists
  write-mode = "error"

  default-spark-session-config = [
    {k: "spark.driver.maxResultSize", v: "0"},
    {k: "spark.debug.maxToStringFields", v: "2000"},
    {k: "spark.sql.broadcastTimeout", v: "3000"}
  ]
}

# ============================= STEP CONFIGURATION =============================
# The comment above each step shows the proper name for the step.

# reactome
reactome {
  inputs {
    pathways {
      format = "csv"
      path = ${common.path}"/input/reactome/ReactomePathways.txt"
      options = [
        {k: "sep", v: "\\t"},
        {k: "header", v: "false"}
        {k: "inferSchema", v: "true"}
      ]
    }
    relations {
      format = "csv"
      path = ${common.path}"/input/reactome/ReactomePathwaysRelation.txt"
      options = [
        {k: "sep", v: "\\t"},
        {k: "header", v: "false"}
        {k: "inferSchema", v: "true"}
      ]
    }
  }
  output = {
    format = ${common.output-format}
    path = ${common.path}"/output/reactome"
  }
}

# pharmacogenomics
pharmacogenomics {
  inputs {
    pgkb {
      format = "json"
      path = ${common.path}"/input/pharmacogenomics/pharmacogenomics.json.gz"
    }
    drug = ${drug.outputs.drug}
  }
  outputs {
    format = ${common.output-format}
    path = ${common.path}"/output/pharmacogenomics"
  }
}

# expression
expression {
  rna {
    format = "csv"
    path = ${common.path}"/input/expression/baseline_expression_counts.tsv"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "true"}
      {k: "inferSchema", v: "true"}
    ]
  }
  binned {
    format = "csv"
    path = ${common.path}"/input/expression/baseline_expression_binned.tsv"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "true"}
      {k: "inferSchema", v: "true"}
    ]
  }
  zscore {
    format = "csv"
    path = ${common.path}"/input/expression/baseline_expression_zscore_binned.tsv"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "true"}
      {k: "inferSchema", v: "true"}
    ]
  }
  exprhierarchy {
    format = "csv"
    path = ${common.path}"/input/expression/expression_hierarchy_curation.tsv"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "false"}
      {k: "inferSchema", v: "true"}
    ]
  }
  efomap {
    format = "parquet"
    path = ${common.path}"/intermediate/expression/tissue-translation-map.parquet"
  }
  tissues {
    format = "csv"
    path = ${common.path}"/intermediate/expression/normal_tissue.tsv.gz"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "true"}
      {k: "inferSchema", v: "true"}
    ]
  }
  output = {
    format = ${common.output-format}
    path = ${common.path}"/output/expression"
  }
}

# interaction
interactions {
  scorethreshold = 0
  string-version = "12"
  target-etl = ${target.outputs.target}
  rnacentral {
    format = "csv"
    path = ${common.path}"/input/interaction/rna_central_ensembl.tsv"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "false"}
    ]
  }
  humanmapping {
    format = "csv"
    path = ${common.path}"/input/interaction/HUMAN_9606_idmapping.dat.gz"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "false"}
    ]
  }
  ensproteins {
    format = "csv"
    path = ${common.path}"/input/interaction/Homo_sapiens.GRCh38.chr.gtf.gz"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "false"},
      {k: "comment", v: "#"}
    ]
  }
  intact {
    format = "json"
    path = ${common.path}"/input/interaction/intact-interactors.json"
  }
  strings {
    format = "csv"
    path = ${common.path}"/input/interaction/string-interactions.txt.gz"
    options = [
      {k: "sep", v: " "},
      {k: "header", v: "true"}
    ]
  }
  outputs = {
    interactions {
      format = ${common.output-format}
      path = ${common.path}"/output/interaction"
    }
    interactions-evidence {
      format = ${common.output-format}
      path = ${common.path}"/output/interaction_evidence"
    }
    interactions-unmatched {
      format = ${common.output-format}
      path = ${common.path}"/etc/log/interaction_invalid"
    }
  }
}

# target
target {
  input {
    chembl = {
      format = "json"
      path = ${common.path}"/input/target/chembl/chembl_target.jsonl"
    }
    chemical-probes = {
      format = "json"
      path = ${common.path}"/input/target/chemicalprobes/chemicalprobes.json.gz"
    }
    ensembl {
      format = ${common.output-format}
      path = ${common.path}"/intermediate/target/ensembl/homo_sapiens.parquet"
    }
    gen-code = {
      format = "csv"
      path = ${common.path}"/input/target/gencode/gencode.gff3.gz"
      options = [
        {k: "comment", v: "#"}
        {k: "sep", v: "\\t"}
      ]
    }
    genetic-constraints = {
      format = "csv"
      path = ${common.path}"/intermediate/target/gnomad/gnomad_lof_by_gene.txt.gz"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
        {k: "nullValue", v: "NA"}
      ]
    }
    gene-ontology {
      format = "csv"
      path = ${common.path}"/input/target/go/goa_human.gaf.gz"
      options = [
        {k: "sep", v: "\\t"},
        {k: "comment", v: "!"} // remove all metadata lines beginning with !
      ]
    }
    gene-ontology-rna {
      format = "csv"
      path = ${common.path}"/input/target/go/goa_human_rna.gaf.gz"
      options = [
        {k: "sep", v: "\\t"},
        {k: "comment", v: "!"} // remove all metadata lines beginning with !
      ]
    }
    gene-ontology-rna-lookup {
      format = "csv"
      path = ${common.path}"/input/target/go/ensembl.tsv"
      options = [
        {k: "sep", v: "\\t"}
      ]
    }
    gene-ontology-eco {
      format = "csv"
      path = ${common.path}"/input/target/go/goa_human_eco.gpa.gz"
      options = [
        {k: "sep", v: "\\t"}
        {k: "comment", v: "!"}
      ]
    }
    hallmarks {
      format = "csv"
      path = ${common.path}"/input/target/hallmarks/cosmic-hallmarks.tsv.gz"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    hgnc {
      format = "json"
      path = ${common.path}"/input/target/genenames/hgnc_complete_set.json"
    },
    homology-dictionary {
      format = "csv"
      path = ${common.path}"/input/target/homologue/species_EnsemblVertebrates.txt"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    homology-coding-proteins {
      format = "csv"
      path = ${common.path}"/input/target/homologue/homologies/*.tsv"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    homology-gene-dictionary {
      format = "parquet"
      path = ${common.path}"/intermediate/target/homologue/gene_dictionary/*.parquet"
      options = [
        {k: "sep", v: "\\t"}
      ]
    }
    hpa {
      format = "csv"
      path = ${common.path}"/intermediate/target/hpa/subcellular_location.tsv.gz"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    hpa-sl-ontology {
      format = "parquet"
      path = ${common.path}"/intermediate/target/hpa/subcellular_locations_ssl.parquet"
    }
    ncbi {
      format = "csv"
      path = ${common.path}"/input/target/ncbi/Homo_sapiens.gene_info.gz"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    ps-gene-identifier {
      format = "parquet"
      path = ${common.path}"/intermediate/target/project-scores/gene_identifiers_latest.parquet"
    }
    ps-essentiality-matrix {
      format = "parquet"
      path = ${common.path}"/intermediate/target/project-scores/04_binaryDepScores.parquet"
    }
    reactome-etl = {
      format = "parquet"
      path = ${common.path}"/output/reactome/part*"
    }
    reactome-pathways = {
      format = "csv"
      path = ${common.path}"/input/target/reactome/Ensembl2Reactome.txt"
      options = [
        {k: "sep", v: "\\t"}
      ]
    }
    safety-evidence {
      format = "json"
      path = ${common.path}"/input/target/safety/safetyLiabilities.json.gz"
    }
    tep {
      format = "json"
      path = ${common.path}"/input/target/tep/tep.json.gz"
    },
    tractability = {
      format = "csv"
      path = ${common.path}"/input/target/tractability/tractability.tsv"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    uniprot {
      format = "txt"
      path = ${common.path}"/input/target/uniprot/uniprot.txt.gz"
    }
    uniprot-ssl {
      format = "csv"
      path = ${common.path}"/input/target/uniprot/uniprot-ssl.tsv.gz"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    gene-essentiality {
       format = "json"
       path = ${common.path}"/input/target/gene-essentiality/essentiality.json.gz"
    }
  }
  outputs {
    target {
      format = ${common.output-format}
      path = ${common.path}"/output/target"
    }
    gene-essentiality {
      format = ${common.output-format}
      path = ${common.path}"/output/target_essentiality"
    }
  }
  hgnc-ortholog-species = [
    "9606-human",
    "9598-chimpanzee",
    "9544-macaque",
    "10090-mouse",
    "10116-rat",
    "9986-rabbit",
    "10141-guineapig",
    "9615-dog",
    "9823-pig",
    "8364-frog",
    "7955-zebrafish",
    "7227-fly",
    "6239-worm",
  ]
}

# target_validation
target-validation {
  inputs = [
    {
      name = "mouse_phenotypes"
      id-column = "targetFromSourceId"
      data = {
        format = "json"
        path = ${common.path}"/input/target_validation/mouse_phenotypes.json.gz"
      }
    }
  ]

  target = ${target.outputs.target}
  output {
    succeeded {
      format = ${common.output-format}
      path = ${common.path}"/output/target_validation"
    }
    failed {
      format = ${common.output-format}
      path = ${common.path}"/etc/log/target_validation"
    }
  }
}

# disease
disease {
  efo-ontology {
    format = "json"
    path = ${common.path}"/input/disease/ontology-efo.jsonl"
  }
  hpo-ontology {
    format = "json"
    path = ${common.path}"/input/disease/ontology-hpo.jsonl"
  }
  mondo-ontology {
    format = "json"
    path = ${common.path}"/input/disease/ontology-mondo.jsonl"
  }
  hpo-phenotype {
    format = "json"
    path = ${common.path}"/input/disease/hpo-phenotypes.jsonl"
  }
  outputs = {
    diseases {
      format = ${common.output-format}
      path = ${common.path}"/output/disease"
    }
    hpo {
      format = ${common.output-format}
      path = ${common.path}"/output/disease_hpo"
    }
    disease-hpo {
      format = ${common.output-format}
      path = ${common.path}"/output/disease_phenotype"
    }
  }
}

# drug
drug {
  chemical-probes = {
    format = "json"
    path = ${common.path}"/input/drug/chemicalprobes.json.gz"
  }
  chembl-indication {
    format = "json"
    path = ${common.path}"/input/drug/chembl_drug_indication.jsonl"
  }
  chembl-molecule {
    format = "json"
    path = ${common.path}"/input/drug/chembl_molecule.jsonl"
  }
  chembl-mechanism {
    format = "json"
    path = ${common.path}"/input/drug/chembl_mechanism.jsonl"
  }
  chembl-target {
    format = "json"
    path = ${common.path}"/input/drug/chembl_target.jsonl"
  }
  chembl-warning {
    format = "json"
    path = ${common.path}"/input/drug/chembl_drug_warning.jsonl"
  }
  disease-etl = {
    format = "parquet"
    path = ${common.path}"/output/disease"
  }
  target-etl = ${target.outputs.target}
  drugbank-to-chembl {
    format = "csv"
    path = ${common.path}/input/drug/drugbank.csv.gz
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "true"}
    ]
  }
  drug-extensions = []
  outputs = {
    drug {
      format = ${common.output-format}
      path = ${common.path}"/output/drug_molecule"
    }
    mechanism-of-action {
      format = ${common.output-format}
      path = ${common.path}"/output/drug_mechanism_of_action"
    }
    indications {
      format = ${common.output-format}
      path = ${common.path}"/output/drug_indication"
    }
    warnings {
      format = ${common.output-format}
      path = ${common.path}"/output/drug_warning"
    }
  }
}

# known_drug
known-drugs {
  inputs = {
    evidences = ${evidences.outputs.succeeded}
    diseases {
      format = "parquet"
      path = ${common.path}"/output/disease"
    }
    targets = ${target.outputs.target}
    drugs = ${drug.outputs}
  }
  output {
    format = ${common.output-format}
    path = ${common.path}"/output/known_drug"
  }
}

# evidence
evidences {
  outputs {
    succeeded {
      format = ${common.output-format}
      path = ${common.path}"/output/evidence"
      partition-by = ["sourceId"]
    }
    failed {
      format = ${common.output-format}
      path = ${common.path}"/etc/log/evidence_invalid"
      partition-by = ["sourceId"]
    }
  }

  inputs {
    raw-input-evidences = {
      format = "json"
      path = ${common.path}"/input/evidence/*"
    }
    raw-intermediate-evidences = {
      format = "json"
      path = ${common.path}"/intermediate/evidence/*"
    }
    diseases {
      format = "parquet"
      path = ${common.path}"/output/disease"
    }
    targets = ${target.outputs.target}
    mechanism-of-action = ${drug.outputs.mechanism-of-action}
  }

  direction-of-effect {
    var-filter-lof = [
      // High impact variants https://www.ensembl.org/info/genome/variation/prediction/predicted_data.html
      "SO_0001589",  // frameshit_variant
      "SO_0001587",  // stop_gained
      "SO_0001574",  // splice_acceptor_variant
      "SO_0001575",  // splice_donor_variant
      "SO_0002012",  // start_lost
      "SO_0001578",  // stop_lost
      "SO_0001893",  // transcript_ablation
    ]
    gof = ["SO_0002053"]
    lof = ["SO_0002054"]
    oncotsg-list = [
      "TSG",
      "oncogene",
      "Oncogene",
      "oncogene",
      "oncogene,TSG",
      "TSG,oncogene",
      "fusion,oncogene",
      "oncogene,fusion",
    ]
    inhibitors = [
      "RNAI INHIBITOR",
      "NEGATIVE MODULATOR",
      "NEGATIVE ALLOSTERIC MODULATOR",
      "ANTAGONIST",
      "ANTISENSE INHIBITOR",
      "BLOCKER",
      "INHIBITOR",
      "DEGRADER",
      "INVERSE AGONIST",
      "ALLOSTERIC ANTAGONIST",
      "DISRUPTING AGENT"
    ]
    activators = [
      "PARTIAL AGONIST",
      "ACTIVATOR",
      "POSITIVE ALLOSTERIC MODULATOR",
      "POSITIVE MODULATOR",
      "AGONIST",
      "SEQUESTERING AGENT",
      "STABILISER"
    ]
    sources = [
       "ot_genetics_portal",
       "gene_burden",
       "eva",
       "eva_somatic",
       "gene2phenotype",
       "orphanet",
       "cancer_gene_census",
       "intogen",
       "impc",
       "chembl",
   ]
  }

  unique-fields = [
    "targetId",
    "targetFromSourceId",
    "diseaseId",
    "datasourceId"
  ]
  score-expr = "resourceScore"
  datatype-id = "other"
  # by default, exclude ppp datasources
  data-sources-exclude = ["ot_crispr", "encore", "ot_crispr_validation"]
  data-sources = [
    {
      id: "chembl",
      unique-fields: [
        "drugId",
        "urls.url"
      ],
      score-expr: """
        element_at(map(cast(0.5 as double), 0.05, cast(1.0 as double), 0.1, cast(2.0 as double), 0.2, cast(3.0 as double), 0.7, cast(4.0 as double), 1.0), clinicalPhase) *
        case
        when studyStopReasonCategories is null then
          double(1.0)
        else
          array_min(
            transform(
              studyStopReasonCategories,
                x -> element_at(
                  map(
                      'Another study', double(1.0),
                      'Business or administrative', double(1.0),
                      'COVID-19', double(1.0),
                      'Ethical reason', double(1.0),
                      'Insufficient data', double(1.0),
                      'Insufficient enrollment', double(1.0),
                      'Interim analysis', double(1.0),
                      'Invalid reason', double(1.0),
                      'Logistics or resources', double(1.0),
                      'Met endpoint', double(1.0),
                      'Negative', double(0.5),
                      'No context', double(1.0),
                      'Regulatory', double(1.0),
                      'Safety or side effects', double(0.5),
                      'Study design', double(1.0),
                      'Study staff moved', double(1.0),
                      'Success', double(1.0),
                      'Uncategorised', double(1.0)
                  ),
               x)
             )
           )
        end
      """
    },
    {
      id: "crispr_screen",
      unique-fields: [
        "studyId",
        "targetFromSourceId",
        "diseaseFromSourceMappedId"
      ],
      score-expr: "pvalue_linear_score(resourceScore, 0.5, 0.005, 0.0, 1.0)"
    },
    {
      id: "europepmc",
      unique-fields: [
        "literature"
      ],
      score-expr: "array_min(array(resourceScore / 100.0, 1.0))"
    },
    {
      id: "eva",
      datatype-id: "genetic_association",
      unique-fields: [
        "studyId",
        "variantId"
      ],
      score-expr: """
      coalesce(array_max(
        transform(
          clinicalSignificances,
          x -> element_at(
            map(
              'association not found', 0.0,
              'benign', 0.0,
              'not provided', 0.0,
              'likely benign', 0.0,
              'likely risk allele', 0.3,
              'low penetrance', 0.3,
              'conflicting interpretations of pathogenicity', 0.3,
              'conflicting data from submitters', 0.3,
              'other', 0.3,
              'uncertain significance', 0.3,
              'uncertain risk allele', 0.3,
              'established risk allele', 0.5,
              'risk factor', 0.5,
              'affects', 0.5,
              'likely pathogenic', 0.7,
              'confers sensitivity', 0.9,
              'association', 0.9,
              'drug response', 0.9,
              'protective', 0.9,
              'pathogenic', 0.9
              ),
            x)
        )
      ), 0.0) + coalesce(element_at(
        map(
          'practice guideline', 0.1,
          'reviewed by expert panel', 0.07,
          'criteria provided, multiple submitters, no conflicts', 0.05,
          'criteria provided, conflicting interpretations', 0.02,
          'criteria provided, single submitter', 0.02,
          'no assertion for the individual variant', 0.0,
          'no assertion criteria provided', 0.0,
          'no assertion provided', 0.0
        ),
        confidence
      ), 0.0)
      """
    },
    {
      id: "eva_somatic",
      unique-fields: [
        "studyId",
        "variantId"
      ],
      score-expr: """
      coalesce(array_max(
        transform(
          clinicalSignificances,
          x -> element_at(
            map(
              'association not found', 0.0,
              'benign', 0.0,
              'not provided', 0.0,
              'likely benign', 0.0,
              'likely risk allele', 0.3,
              'conflicting interpretations of pathogenicity', 0.3,
              'conflicting data from submitters', 0.3,
              'other', 0.3,
              'uncertain significance', 0.3,
              'low penetrance', 0.3,
              'uncertain risk allele', 0.3,
              'established risk allele', 0.5,
              'risk factor', 0.5,
              'affects', 0.5,
              'likely pathogenic', 0.7,
              'confers sensitivity', 0.9,
              'association', 0.9,
              'drug response', 0.9,
              'protective', 0.9,
              'pathogenic', 0.9
              ),
            x)
        )
      ), 0.0) + coalesce(element_at(
        map(
          'practice guideline', 0.1,
          'reviewed by expert panel', 0.07,
          'criteria provided, multiple submitters, no conflicts', 0.05,
          'criteria provided, conflicting interpretations', 0.02,
          'criteria provided, single submitter', 0.02,
          'no assertion for the individual variant', 0.0,
          'no assertion criteria provided', 0.0,
          'no assertion provided', 0.0
        ),
        confidence
      ), 0.0)
      """
    },
    {
      excluded-biotypes: [
        "IG_C_pseudogene",
        "IG_J_pseudogene",
        "IG_pseudogene",
        "IG_V_pseudogene",
        "polymorphic_pseudogene",
        "processed_pseudogene",
        "pseudogene",
        "rRNA",
        "rRNA_pseudogene",
        "snoRNA",
        "snRNA",
        "transcribed_processed_pseudogene",
        "transcribed_unitary_pseudogene",
        "transcribed_unprocessed_pseudogene",
        "TR_J_pseudogene",
        "TR_V_pseudogene",
        "unitary_pseudogene",
        "unprocessed_pseudogene"
      ],
      id: "expression_atlas",
      unique-fields: [
        "contrast",
        "studyId"
      ],
      score-expr: "array_min(array(1.0, pvalue_linear_score_default(resourceScore) * (abs(log2FoldChangeValue) / 10) * (log2FoldChangePercentileRank / 100)))"
    },
    {
      id: "gene_burden",
      datatype-id: "genetic_association",
      unique-fields: [
        "ancestryId",
        "diseaseFromSource"
        "statisticalMethod",
        "projectId"
      ],
      score-expr: "pvalue_linear_score(resourceScore, 1e-7, 1e-17, 0.25, 1.0)"
    },
    {
      id: "gene2phenotype",
      datatype-id: "genetic_association",
      unique-fields: [
        "diseaseFromSource",
        "allelicRequirements",
        "studyId"
      ],
      score-expr: """
      element_at(
        map(
          'definitive', 1.0,
          'both RD and IF', 1.0,
          'strong', 1.0,
          'moderate', 0.5,
          'limited', 0.01
        ),
        confidence
      )
      """
    },
    {
      id: "genomics_england",
      datatype-id: "genetic_association",
      unique-fields: [
        "diseaseFromSource",
        "studyId"
      ],
      score-expr: """
      element_at(
        map(
          'amber', 0.5,
          'green', 1.0
        ),
        confidence
      )
      """
    },
    {
      id: "intogen",
      unique-fields: [
        "cohortShortName"
      ],
      score-expr: "pvalue_linear_score(resourceScore, 0.1, 1e-10, 0.25, 1.0)"
    },
    {
      id: "ot_genetics_portal",
      datatype-id: "genetic_association"
      unique-fields: [
        "studyId",
        "variantId"
      ],
      score-expr: "resourceScore"
    },
    {
      id: "gwas_credible_sets",
      datatype-id: "genetic_association"
      unique-fields: [
        "studyLocusId",
      ],
      score-expr: "resourceScore"
    },
    {
      id: "ot_crispr",
      datatype-id: "ot_partner",
      unique-fields: [
        "studyId",
        "diseaseFromSourceMappedId",
        "targetFromSourceId",
        "resourceScore",
        "statisticalTestTail"
      ],
      score-expr: "1.0"
    },
    {
      id: "encore",
      datatype-id: "ot_partner",
      unique-fields: [
        "targetFromSourceId",
        "interactingTargetFromSourceId",
        "diseaseFromSourceMappedId",
        "cellType"
      ],
      score-expr: "pvalue_linear_score(geneticInteractionPValue, 1.0, 0.01, 0.0, 1.0)"
    },
    {
      id: "ot_crispr_validation",
      unique-fields: [
        "targetFromSourceId", "diseaseFromSourceMappedId", "resourceScore", "diseaseCellLines", "primaryProjectId"
      ],
      score-expr: "resourceScore"
    },
    {
      id: "orphanet",
      datatype-id: "genetic_association",
      unique-fields: [
        "diseaseFromSourceId"
      ],
      score-expr: "element_at(map('Assessed', 1.0,'Not yet assessed', 0.5), confidence)"
    },
    {
      id: "impc",
      unique-fields: [
        "diseaseFromSource",
        "biologicalModelAllelicComposition",
        "targetInModel",
        "biologicalModelGeneticBackground"
      ],
      score-expr: "resourceScore / 100"
    },
    {
      id: "crispr",
      score-expr: "linear_rescale(resourceScore, 41.5, 100, 0.415, 1.0)",
      unique-fields: []
    },
    {
      id: "progeny",
      unique-fields: [
        "pathways",
        "diseaseFromSource"
      ],
      score-expr: "pvalue_linear_score(resourceScore, 1e-4, 1e-14, 0.5, 1.0)"
    },
    {
      id: "reactome",
      unique-fields: [
        "variantAminoacidDescriptions",
        "targetModulation",
        "reactionId"
      ],
      score-expr: "1.0"
    },
    {
      id: "slapenrich",
      unique-fields: [
        "pathways",
        "diseaseFromSource"
      ],
      score-expr: "pvalue_linear_score(resourceScore, 1e-4, 1e-14, 0.5, 1.0)"
    },
    {
      id: "sysbio",
      unique-fields: [
        "studyOverview",
        "literature",
        "pathways"
      ],
      score-expr: "resourceScore"
    },
    {
      id: "uniprot_literature"
      datatype-id: "genetic_association"
      unique-fields: [
        "diseaseFromSource"
      ],
      score-expr: """
      element_at(
        map(
          'high', 1.0,
          'medium', 0.5
        ),
        confidence
      )
      """

    },
    {
      id: "uniprot_variants"
      datatype-id: "genetic_association"
      unique-fields: [
        "diseaseFromSource",
        "variantRsId",
        "variantId"
      ],
      score-expr: """
      element_at(
        map(
          'high', 1.0,
          'medium', 0.5
        ),
        confidence
      )
      """

    },
    {
      id: "clingen"
      datatype-id: "genetic_association"
      unique-fields: [
        "diseaseFromSource",
        "studyId",
        "allelicRequirements",
      ],
      score-expr: """
      element_at(
        map(
          'No Known Disease Relationship', 0.01,
          'Refuted', 0.01,
          'Disputed', 0.01,
          'Limited', 0.01,
          'Moderate', 0.5,
          'Strong', 1.0,
          'Definitive', 1.0
        ),
        confidence
      )
      """
    },
    {
      id: "cancer_biomarkers"
      unique-fields: [
        "biomarkerName",
        "confidence",
        "diseaseFromSource",
        "drugFromSource",
        "drugResponse"
      ],
      score-expr: "1.0"
    }
  ]
}

# search_facet
facet-search {
  inputs = {
    diseases {
      format = "parquet"
      path = ${common.path}"/output/disease"
    }
    targets = ${target.outputs.target}
    go = ${gene-ontology.output}
  }
  outputs {
    targets {
      format = ${common.output-format}
      path = ${common.path}"/view/search_facet_target"
    }
    diseases {
      format = ${common.output-format}
      path = ${common.path}"/view/search_facet_disease"
    }
  }
  categories {
    disease-name = "Disease"
    therapeutic-area = "Therapeutic Area"
    sm = "Tractability Small Molecule"
    ab = "Tractability Antibody"
    pr = "Tractability PROTAC"
    oc = "Tractability Other Modalities"
    target-id = "Target ID"
    approved-symbol = "Approved Symbol"
    approved-name = "Approved Name"
    subcellular-location = "Subcellular Location"
    target-class = "ChEMBL Target Class"
    pathways = "Reactome"
    go-f = "GO:MF"
    go-p = "GO:BP"
    go-c = "GO:CC"
  }
}

# go
gene-ontology {
  go-input = {
    format = "csv"
    path = ${common.path}"/input/go/go.obo"
  }
  output {
    format = ${common.output-format}
    path = ${common.path}"/output/go"

  }
}

# association
associations {
  outputs = {
    direct-by-datatype = {
      format = ${common.output-format}
      path = ${common.path}"/view/association_by_datatype_direct"
    }
    direct-by-datasource = {
      format = ${common.output-format}
      path = ${common.path}"/view/association_by_datasource_direct"
    }
    direct-by-overall = {
      format = ${common.output-format}
      path = ${common.path}"/view/association_overall_direct"
    }
    indirect-by-datasource = {
      format = ${common.output-format}
      path = ${common.path}"/view/association_by_datasource_indirect"
    }
    indirect-by-datatype = {
      format = ${common.output-format}
      path = ${common.path}"/view/association_by_datatype_indirect"
    }
    indirect-by-overall = {
      format = ${common.output-format}
      path = ${common.path}"/view/association_by_overall_indirect"
    }
  }
  inputs = {
    evidences = ${evidences.outputs.succeeded}
    diseases {
      format = "parquet"
      path = ${common.path}"/output/disease"
    }
  }

  default-weight = 1.0
  default-propagate = true
  data-sources = [
    {id: "europepmc", weight: 0.2, data-type = "literature", propagate = true},
    {id: "expression_atlas", weight: 0.2, data-type = "rna_expression", propagate = false},
    {id: "impc", weight: 0.2, data-type = "animal_model", propagate = true},
    {id: "progeny", weight: 0.5, data-type = "affected_pathway", propagate = true},
    {id: "slapenrich", weight: 0.5, data-type = "affected_pathway", propagate = true},
    {id: "sysbio", weight: 0.5, data-type = "affected_pathway", propagate = true},
    {id: "cancer_biomarkers", weight: 0.5, data-type = "affected_pathway", propagate = true},
    {id: "ot_crispr", weight: 0.5, data-type = "ot_partner", propagate = true},
    {id: "ot_crispr_validation", weight: 0.5, data-type = "ot_validation_lab", propagate = true},
    {id: "encore", weight: 0.5, data-type = "ot_partner", propagate = true},
  ]
}

# association_otf
aotf {
  inputs = {
    diseases {
      format = "parquet"
      path = ${common.path}"/output/disease"
    }
    evidences = ${evidences.outputs.succeeded}
    targets = ${target.outputs.target}
  }
  outputs = {
    clickhouse = {
      format = ${common.output-format}
      path = ${common.path}"/view/association_otf"
    }
  }
}

# search
search {
  inputs = {
    evidences = ${evidences.outputs.succeeded}
    diseases {
      format = "parquet"
      path = ${common.path}"/output/disease"
    }
    disease-hpo = {
      format = "parquet"
      path = ${common.path}"/output/disease_phenotype"
    }
    hpo = {
      format = "parquet"
      path = ${common.path}"/output/disease_hpo"
    }
    targets = ${target.outputs.target}
    drugs = ${drug.outputs}
    associations = ${associations.outputs.indirect-by-overall}
    studies = {
      format = "parquet"
      path = ${common.path}"/output/study"
    }
    variants = {
      format = "parquet"
      path = ${common.path}"/output/variant"
    }
  }
  outputs {
    targets {
      format = ${common.output-format}
      path = ${common.path}"/view/search_target"
    }
    diseases {
      format = ${common.output-format}
      path = ${common.path}"/view/search_disease"
    }
    drugs {
      format = ${common.output-format}
      path = ${common.path}"/view/search_drug"
    }
    variants {
      format = ${common.output-format}
      path = ${common.path}"/view/search_variant"
    }
    studies {
      format = ${common.output-format}
      path = ${common.path}"/view/search_study"
    }
  }
}

# openfda
openfda {
  chembl-drugs = ${drug.outputs.drug}
  fda-data {
    format = ${common.output-format}
    path = ${common.path}"/intermediate/openfda/*"
  }
  blacklisted-events {
    format = "csv"
    path = ${common.path}"/input/openfda/blacklisted_events.txt"
    options = [
      {k: "sep", v: "\\t"},
      {k: "ignoreLeadingWhiteSpace", v: "true"},
      {k: "ignoreTrailingWhiteSpace", v: "true"}
    ]
  }
  meddra {
    meddra-preferred-terms {
      format = "csv"
      path = "gs://open-targets-data-releases-private/meddra/meddra23.1/MedAscii/pt.asc"
    }
    meddra-low-level-terms {
      format = "csv"
      path = "gs://open-targets-data-releases-private/meddra/meddra23.1/MedAscii/llt.asc"
    }
  }
  meddra-preferred-terms-cols = ["pt_code", "pt_name"]
  meddra-low-level-terms-cols = ["llt_code", "llt_name"]
  montecarlo {
    permutations: 100
    percentile: 0.95
  }
  sampling {
    size = 0.1
    enabled = false
  }
  outputs = {
    fda-unfiltered {
      format = ${common.output-format}
      path = ${common.path}"/intermediate/openfda_adverse_drug_reactions"
    }
    fda-results {
      format = ${common.output-format}
      path = ${common.path}"/output/openfda_significant_adverse_drug_reactions"
    }
    fda-targets-unfiltered {
      format = ${common.output-format}
      path = ${common.path}"/intermediate/openfda_adverse_target_reactions"
    }
    fda-targets-results {
      format = ${common.output-format}
      path = ${common.path}"/output/openfda_significant_adverse_target_reactions"
    }
    sampling {
      format = ${common.output-format}
      path = ${common.path}"/intermediate/openfda_sample"
    }
    sampling-targets {
      format = ${common.output-format}
      path = ${common.path}"/intermediate/openfda_sample_targets"
    }
  }

}

# search_ebi
ebisearch {
  disease-etl {
    format = "parquet"
    path = ${common.path}"/output/disease"
  }
  target-etl = ${target.outputs.target}
  evidence-etl {
    format = ${common.output-format}
    path = ${evidences.outputs.succeeded.path}"/sourceId=ot_genetics_portal/"
  }
  association-etl = ${associations.outputs.direct-by-overall}
  outputs = {
    ebisearch-associations {
      format = ${common.output-format}
      path = ${common.path}"/view/search_ebi_associations"
    }
    ebisearch-evidence {
      format = ${common.output-format}
      path = ${common.path}"/view/search_ebi_evidence"
    }
  }
}

# otar
otarproject {
  disease-etl {
    format = "parquet"
    path = ${common.path}"/output/disease"
  }
  otar-meta {
    format = "csv"
    path = ${common.path}"/input/otar/otar_meta.csv"
    options = [
      {k: "sep", v: ","},
      {k: "header", v: "true"}
      {k: "inferSchema", v: "true"}
    ]
  }
  otar-project-to-efo {
    format = "csv"
    path = ${common.path}"/input/otar/otar_project_to_efo.csv"
    options = [
      {k: "sep", v: ","},
      {k: "header", v: "true"}
      {k: "inferSchema", v: "true"}
    ]
  }
  output = {
    format = ${common.output-format}
    path = ${common.path}"/output/otar"
  }
}

# literature
literature {
  common = {
    publication-section-ranks = [
      {section: "title", rank: 1, weight: 1}
      {section: "abstract", rank: 1, weight: 0.8}
      {section: "concl", rank: 1, weight: 0.7}
      {section: "results", rank: 2, weight: 0.6}
      {section: "discuss", rank: 2, weight: 0.5}
      {section: "methods", rank: 3, weight: 0.3}
      {section: "other", rank: 4, weight: 0.1}
    ]

    spark-session-config = [
      {k: "spark.sql.mapKeyDedupPolicy", v: "LAST_WIN"}
    ]
  }

  processing {
    // When preparing the literature outputs we can optionally save all the
    // entities which did not match. These are not used for anything down-stream
    // and are only useful for debugging and quality control. Setting this value
    // to true will result in additional outputs 'failedMatches' and 'failedCoocs'
    // being written. Note, this slows down the process significantly.
    write-failures = false
    epmcids {
      format = "csv"
      path = ${common.path}"/input/literature/PMID_PMCID_DOI.csv.gz"
      options = [
        {k: "header", v: "true"}
        {k: "inferSchema", v: "true"}
      ]
    }
    diseases {
      format = "parquet"
      path = ${common.path}"/output/disease"
    }
    targets = ${target.outputs.target}
    drugs = ${drug.outputs.drug}
    abstracts {
      kind = "Abstracts"
      input {
        format = "json"
        path = "gs://otar025-epmc/ml02/abstract/**/*.jsonl"
      }
    }
    full-texts {
      kind = "Full-text"
      input {
        format = "json"
        path = "gs://otar025-epmc/ml02/fulltext/**/*.jsonl"
      }
    }
    outputs = {
      cooccurrences {
        format = ${common.output-format}
        path = ${common.path}"/intermediate/cooccurrences"
      }
      matches {
        format = ${common.output-format}
        path = ${common.path}"/intermediate/matches"
      }
      literature-index {
        format = ${common.output-format}
        path = ${common.path}"/output/literature"
      }
      literature-sentences {
        format = ${common.output-format}
        path = ${common.path}"/output/literature_sentence"
      }
      failed-cooccurrences {
        format = ${common.output-format}
        path = ${common.path}"/etc/log/literature_cooccurrence_invalid"
      }
      failed-matches {
        format = ${common.output-format}
        path = ${common.path}"/etc/log/literature_invalid"
      }
    }

  }

  epmc {
        uris {
          ensembl = "https://www.ensembl.org/Homo_sapiens/Gene/Summary?db=core;g="
          chembl = "https://www.ebi.ac.uk/chembl/compound_report_card/"
          ontologies = "https://www.ebi.ac.uk/ols/ontologies/efo/terms?short_form="
        }
        input {
          cooccurences = ${literature.processing.outputs.cooccurrences}
        }
        outputs {
          epmc-cooccurrences {
            format = ${common.output-format}
            path = ${common.path}"/intermediate/literature_cooccurrences_epmc"
          }
          output {
            format = "json"
            path = ${common.path}"/intermediate/literature_evidence_epmc"
            options = [
              {k: "compression", v: "gzip"},
            ]
          }
        }
        excluded-target-terms = [
          "TEC",
          "TECS",
          "Tec",
          "tec",
          "'",
          "(",
          ")",
          "-",
          "-S",
          "S",
          "S-",
          "SS",
          "SSS",
          "Ss",
          "Ss-",
          "s",
          "s-",
          "ss",
          "U3",
          "U6",
          "u6",
          "SNORA70",
          "U2",
          "U8"
        ]
        # The following are the relevant sections for disease/target associations as described in PMID28587637
        sections-of-interest = [
          "title",
          "abstract",
          "intro",
          "case",
          "figure",
          "table",
          "discuss",
          "concl",
          "results",
          "appendix",
          "other",
        ]
        print-metrics = true
      }

  embedding {
    model-configuration {
      window-size = 10
      num-partitions = 16
      max-iter = 3
      min-count = 1
      step-size = 0.02
    }
    input = ${literature.processing.outputs.matches}
    outputs = {
      model = {
        format = ${common.output-format}
        path = ${common.path}"/etc/model/w2v_model"
      }
      training-set = {
        format = ${common.output-format}
        path = ${common.path}"/intermediate/literature_training_set"
      }
    }
  }

  vectors {
    input = ${literature.embedding.outputs.model.path}
    output {
      format = ${common.output-format}
      path = ${common.path}"/intermediate/literature_vectors"
    }
  }
}

# target_engine
target-engine {
  inputs {
    targets = ${target.outputs.target}
    molecule = ${drug.outputs.drug}
    mechanism-of-action = ${drug.outputs.mechanism-of-action}
    mouse-phenotypes = {
      format = "json"
      path = ${common.path}"/input/target_validation/mouse_phenotypes.json.gz"
    }
    hpa-data = {
      format = "json"
      path = ${common.path}"/input/target_engine/proteinatlas.json.gz"
    }
    uniprot-slterms = {
      format = "csv"
      path = ${common.path}"/input/target_engine/uniprot_locations.tsv.gz"
      options = [
        {k: "header", v: "true"},
        {k: "sep", v: "\t"},
      ]
    }
    mouse-pheno-scores = {
      format = "csv"
      path = ${common.path}"/input/target_engine/mouse_pheno_scores.csv"
      options = [
            {k: "sep", v: ","},
            {k: "header", v: "true"}
            {k: "inferSchema", v: "true"}
          ]
    }
  }
  outputs {
    target-engine = {
      path = ${common.path}"/output/target_prioritisation"
      format = ${common.output-format}
    }
  }
}
