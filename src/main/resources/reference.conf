spark-uri = null

// --- Release baseline parameters --- //
data_version = "YY.MM.n"
chembl_version = "XX"
ensembl_version = "YYY"
// --- END --- Release baseline parameters --- //


spark-settings {
  // Specifies the behavior when data or table already exists. Options include:
  //   overwrite: overwrite the existing data.
  //   append: append the data.
  //   ignore: ignore the operation (i.e. no-op).
  //   error or errorifexists: default option, throw an exception at runtime.
  // Taken from `DataFrameWrite.scala` scaladoc.
  write-mode = "error"
  // if set to true will short-circuit calculation of step if the output directory already exists rather than waiting
  // until the `write` call before determining whether to proceed. This only takes effect if `spark-settings.write-mode`
  // is set to `ignore`.
  ignore-if-exists = true

  default-spark-session-config = [
    {k: "spark.driver.maxResultSize", v: "0"},
    {k: "spark.debug.maxToStringFields", v: "2000"},
    {k: "spark.sql.broadcastTimeout", v: "3000"}
  ]
}

etl-dag {
  // Resolve specifies whether a dependency tree should be created and upstream steps run automatically. If set to true
  // 'upstream' steps will be run automatically. For example, selecting 'target' will results in 'reactome' and 'target'
  // being run automatically. If resolve is set to false only specified steps will be run and it is the responsibility
  // of the user to ensure that the required dependencies are available.
  resolve = true

  steps = [
    {step: "disease", dependencies: []},
    {step: "reactome", dependencies: []},
    {step: "expression", dependencies: []},
    {step: "pharmacogenomics", dependencies: ["drug"]},
    {step: "go", dependencies: []},
    {step: "target", dependencies: ["reactome"]},
    {step: "facetsearch", dependencies: ["target", "disease"]},
    {step: "interaction", dependencies: ["target"]},
    {step: "targetValidation", dependencies: ["target"]},
    {step: "evidence", dependencies: ["disease", "target", "drug"]},
    {step: "association", dependencies: ["evidence", "disease"]},
    {step: "associationOTF", dependencies: ["evidence", "target", "disease", "reactome"]},
    {step: "search", dependencies: ["target", "drug", "evidence", "association", "disease"]},
    {step: "drug", dependencies: ["target", "disease"]},
    {step: "literature", dependencies: ["drug", "disease", "target"]},
    {step: "knownDrug", dependencies: ["target", "disease", "drug", "evidence"]},
    {step: "ebisearch", dependencies: ["target", "disease", "evidence", "association"]},
    {step: "fda", dependencies: ["drug"]},
    {step: "otar", dependencies: ["disease"]},
    {step: "targetengine", dependencies: ["target", "drug"]}
  ]
}

common {
  output-format = "parquet"
  output-base_path = "gs://open-targets-pre-data-releases/"${data_version}"/output"
  output = ${common.output-base_path}"/etl/"${common.output-format}
  output = ${?OT_ETL_OUTPUT}

  metadata {
    write-mode = "append"
    output {
      format = "json"
      path = ${common.output-base_path}"/metadata/"
    }
  }

  input = "gs://open-targets-pre-data-releases/"${data_version}"/input"
  error = ${common.output}"/errors/"
  additional-outputs = ["json"]

}

epmc {
  uris {
    ensembl = "https://www.ensembl.org/Homo_sapiens/Gene/Summary?db=core;g="
    chembl = "https://www.ebi.ac.uk/chembl/compound_report_card/"
    ontologies = "https://www.ebi.ac.uk/ols/ontologies/efo/terms?short_form="
  }
  input {
    cooccurences = ${literature.processing.outputs.cooccurrences}
  }
  outputs {
    epmc-cooccurrences {
      format = ${common.output-format}
      path = ${common.output}"/literature/epmcCooccurrences"
    }
    output {
      format = "json" // to be consistent with the other Evidence files
      path = ${common.input}"/evidence-files/epmc"
      options = [
        {k: "compression", v: "gzip"},
      ]
    }
  }
  excluded-target-terms = [
    "TEC",
    "TECS",
    "Tec",
    "tec",
    "'",
    "(",
    ")",
    "-",
    "-S",
    "S",
    "S-",
    "SS",
    "SSS",
    "Ss",
    "Ss-",
    "s",
    "s-",
    "ss",
    "U3",
    "U6",
    "u6",
    "SNORA70",
    "U2",
    "U8"
  ]
  # The following are the relevant sections for disease/target associations as described in PMID28587637
  sections-of-interest = [
    "title",
    "abstract",
    "intro",
    "case",
    "figure",
    "table",
    "discuss",
    "concl",
    "results",
    "appendix",
    "other",
  ]
  print-metrics = true
}
reactome {
  inputs {
    pathways {
      format = "csv"
      path = ${common.input}"/reactome-inputs/ReactomePathways.txt"
      options = [
        {k: "sep", v: "\\t"},
        {k: "header", v: "false"}
        {k: "inferSchema", v: "true"}
      ]
    }
    relations {
      format = "csv"
      path = ${common.input}"/reactome-inputs/ReactomePathwaysRelation.txt"
      options = [
        {k: "sep", v: "\\t"},
        {k: "header", v: "false"}
        {k: "inferSchema", v: "true"}
      ]
    }
  }
  output = {
    format = ${common.output-format}
    path = ${common.output}"/reactome"
  }
}

pharmacogenomics {
  inputs {
    pgkb {
      format = "json"
      path = ${common.input}"/pharmacogenomics-inputs/pharmacogenomics.json.gz"
    }
    drug = ${drug.outputs.drug}
  }
  outputs {
    format = ${common.output-format}
    path = ${common.output}"/pharmacogenomics"
  }
}

expression {
  rna {
    format = "csv"
    path = ${common.input}"/expression-inputs/baseline_expression_counts.tsv"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "true"}
      {k: "inferSchema", v: "true"}
    ]
  }
  binned {
    format = "csv"
    path = ${common.input}"/expression-inputs/baseline_expression_binned.tsv"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "true"}
      {k: "inferSchema", v: "true"}
    ]
  }
  zscore {
    format = "csv"
    path = ${common.input}"/expression-inputs/baseline_expression_zscore_binned.tsv"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "true"}
      {k: "inferSchema", v: "true"}
    ]
  }
  exprhierarchy {
    format = "csv"
    path = ${common.input}"/expression-inputs/expression_hierarchy_curation.tsv"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "false"}
      {k: "inferSchema", v: "true"}
    ]
  }
  efomap {
    format = "json"
    path = ${common.input}"/expression-inputs/tissue-translation-map.json"
  }
  tissues {
    format = "csv"
    path = ${common.input}"/expression-inputs/normal_tissue.tsv.gz"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "true"}
      {k: "inferSchema", v: "true"}
    ]
  }
  output = {
    format = ${common.output-format}
    path = ${common.output}"/baselineExpression"
  }
}

interactions {
  scorethreshold = 0
  string-version = "12"
  target-etl {
    format = ${common.output-format}
    path = ${common.output}"/targets"
  }
  rnacentral {
    format = "csv"
    path = ${common.input}"/interactions-inputs/rna_central_ensembl.tsv"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "false"}
    ]
  }
  humanmapping {
    format = "csv"
    path = ${common.input}"/interactions-inputs/HUMAN_9606_idmapping.dat.gz"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "false"}
    ]
  }
  ensproteins {
    format = "csv"
    path = ${common.input}"/interactions-inputs/Homo_sapiens.GRCh38.chr.gtf.gz"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "false"},
      {k: "comment", v: "#"}
    ]
  }
  intact {
    format = "json"
    path = ${common.input}"/interactions-inputs/intact-interactors.json"
  }
  strings {
    format = "csv"
    path = ${common.input}"/interactions-inputs/string-interactions.txt.gz"
    options = [
      {k: "sep", v: " "},
      {k: "header", v: "true"}
    ]
  }
  outputs = {
    interactions {
      format = ${common.output-format}
      path = ${common.output}"/interaction"
    }
    interactions-evidence {
      format = ${common.output-format}
      path = ${common.output}"/interactionEvidence"
    }
    interactions-unmatched {
      format = ${common.output-format}
      path = ${common.error}"/interaction"
      generate-metadata = false
    }
  }
}

target {
  input {
    chembl = ${drug.chembl-target}
    chemical-probes = {
      format = "json"
      path = ${common.input}"/target-inputs/chemicalprobes/chemicalprobes.json.gz"
    }
    ensembl {
      format = "json"
      path = ${common.input}"/target-inputs/ensembl/homo_sapiens.jsonl"
    }
    gen-code = {
      format = "csv"
      path = ${common.input}"/target-inputs/gencode/gencode.gff3.gz"
      options = [
        {k: "comment", v: "#"}
        {k: "sep", v: "\\t"}
      ]
    }
    genetic-constraints = {
      format = "csv"
      path = ${common.input}"/target-inputs/gnomad/gnomad_lof_by_gene.txt.gz"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
        {k: "nullValue", v: "NA"}
      ]
    }
    gene-ontology {
      format = "csv"
      path = ${common.input}"/target-inputs/go/goa_human.gaf.gz"
      options = [
        {k: "sep", v: "\\t"},
        {k: "comment", v: "!"} // remove all metadata lines beginning with !
      ]
    }
    gene-ontology-rna {
      format = "csv"
      path = ${common.input}"/target-inputs/go/goa_human_rna.gaf.gz"
      options = [
        {k: "sep", v: "\\t"},
        {k: "comment", v: "!"} // remove all metadata lines beginning with !
      ]
    }
    gene-ontology-rna-lookup {
      format = "csv"
      path = ${common.input}"/target-inputs/go/ensembl.tsv"
      options = [
        {k: "sep", v: "\\t"}
      ]
    }
    gene-ontology-eco {
      format = "csv"
      path = ${common.input}"/target-inputs/go/goa_human_eco.gpa.gz"
      options = [
        {k: "sep", v: "\\t"}
        {k: "comment", v: "!"}
      ]
    }
    hallmarks {
      format = "csv"
      path = ${common.input}"/target-inputs/hallmarks/cosmic-hallmarks.tsv.gz"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    hgnc {
      format = "json"
      path = ${common.input}"/target-inputs/genenames/hgnc_complete_set.json"
    },
    homology-dictionary {
      format = "csv"
      path = ${common.input}"/target-inputs/homologue/species_EnsemblVertebrates.txt"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    homology-coding-proteins {
      format = "csv"
      path = ${common.input}"/target-inputs/homologue/homologies/*.tsv.gz"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    homology-gene-dictionary {
      format = "csv"
      path = ${common.input}"/target-inputs/homologue/gene_dictionary/*.tsv"
      options = [
        {k: "sep", v: "\\t"}
      ]
    }
    hpa {
      format = "csv"
      path = ${common.input}"/target-inputs/hpa/subcellular_location.tsv.gz"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    hpa-sl-ontology {
      format = "csv"
      path = ${common.input}"/target-inputs/hpa/subcellular_locations_ssl.tsv"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    ncbi {
      format = "csv"
      path = ${common.input}"/target-inputs/ncbi/Homo_sapiens.gene_info.gz"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    ps-gene-identifier {
      format = "csv"
      path = ${common.input}"/target-inputs/project-scores/gene_identifiers_latest.csv.gz"
      options = [
        {k: "header", v: true}
      ]
    }
    ps-essentiality-matrix {
      format = "csv"
      path = ${common.input}"/target-inputs/project-scores/04_binaryDepScores.tsv"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    reactome-etl = {
      format = ${common.output-format}
      path = ${common.output}"/reactome/part*"
    }
    reactome-pathways = {
      format = "csv"
      path = ${common.input}"/target-inputs/reactome/Ensembl2Reactome.txt"
      options = [
        {k: "sep", v: "\\t"}
      ]
    }
    safety-evidence {
      format = "json"
      path = ${common.input}"/target-inputs/safety/safetyLiabilities.json.gz"
    }
    tep {
      format = "json"
      path = ${common.input}"/target-inputs/tep/tep.json.gz"
    },
    tractability = {
      format = "csv"
      path = ${common.input}"/target-inputs/tractability/tractability.tsv"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    uniprot {
      format = "txt"
      path = ${common.input}"/target-inputs/uniprot/uniprot.txt.gz"
    }
    uniprot-ssl {
      format = "csv"
      path = ${common.input}"/target-inputs/uniprot/uniprot-ssl.tsv.gz"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    gene-essentiality {
       format = "json"
       path = ${common.input}"/target-inputs/gene-essentiality/essentiality.json.gz"
    }
  }
  outputs {
    target {
      format = ${common.output-format}
      path = ${common.output}"/targets"
    }
    gene-essentiality {
      format = ${common.output-format}
      path = ${common.output}"/targetEssentiality"
    }
  }
  hgnc-ortholog-species = [
    "9606-human",
    "9598-chimpanzee",
    "9544-macaque",
    "10090-mouse",
    "10116-rat",
    "9986-rabbit",
    "10141-guineapig",
    "9615-dog",
    "9823-pig",
    "8364-frog",
    "7955-zebrafish",
    "7227-fly",
    "6239-worm",
  ]
}

target-validation {
  inputs = [
    {
      name = "mousePhenotypes"
      id-column = "targetFromSourceId"
      data = {
        format = "json"
        path = ${common.input}"/mouse-phenotypes-inputs/mouse_phenotypes.json.gz"
      }
    }
  ]
  target = ${target.outputs.target}
  output {
    succeeded {
      format = ${common.output-format}
      path = ${common.output}
    }
    failed {
      format = ${common.output-format}
      path = ${common.error}
      generate-metadata = false
    }
  }
}

disease {
  efo-ontology {
    format = "json"
    path = ${common.input}"/ontology-inputs/ontology-efo.jsonl"
  }
  hpo-ontology {
    format = "json"
    path = ${common.input}"/ontology-inputs/ontology-hpo.jsonl"
  }
  mondo-ontology {
    format = "json"
    path = ${common.input}"/ontology-inputs/ontology-mondo.jsonl"
  }
  hpo-phenotype {
    format = "json"
    path = ${common.input}"/ontology-inputs/hpo-phenotypes.jsonl"
  }
  outputs = {
    diseases {
      format = ${common.output-format}
      path = ${common.output}"/diseases"
    }
    hpo {
      format = ${common.output-format}
      path = ${common.output}"/hpo"
    }
    disease-hpo {
      format = ${common.output-format}
      path = ${common.output}"/diseaseToPhenotype"
    }
  }
}

drug {
  chemical-probes = {
      format = "json"
      path = ${common.input}"/target-inputs/chemicalprobes/chemicalprobes.json.gz"
    }
  chembl-molecule {
    format = "json"
    path = ${common.input}"/chembl-inputs/chembl_"${chembl_version}"_molecule.jsonl"
  }
  chembl-indication {
    format = "json"
    path = ${common.input}"/chembl-inputs/chembl_"${chembl_version}"_drug_indication.jsonl"
  }
  chembl-mechanism {
    format = "json"
    path = ${common.input}"/chembl-inputs/chembl_"${chembl_version}"_mechanism.jsonl"
  }
  chembl-target {
    format = "json"
    path = ${common.input}"/chembl-inputs/chembl_"${chembl_version}"_target.jsonl"
  }
  chembl-warning {
    format = "json"
    path = ${common.input}"/chembl-inputs/chembl_"${chembl_version}"_drug_warning.jsonl"
  }
  disease-etl = ${disease.outputs.diseases}
  target-etl {
    format = ${common.output-format}
    path = ${common.output}"/targets"
  }
  drugbank-to-chembl {
    format = "csv"
    path = ${common.input}"/chembl-inputs/drugbank.csv.gz"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "true"}
    ]
  }
  drug-extensions = []
  outputs = {
    drug {
      format = ${common.output-format}
      path = ${common.output}"/molecule"
    }
    mechanism-of-action {
      format = ${common.output-format}
      path = ${common.output}"/mechanismOfAction"
    }
    indications {
      format = ${common.output-format}
      path = ${common.output}"/indication"
    }
    warnings {
      format = ${common.output-format}
      path = ${common.output}"/drugWarnings"
    }
  }
}

known-drugs {
  inputs = {
    evidences = ${evidences.outputs.succeeded}
    diseases = ${disease.outputs.diseases}
    targets {
      path = ${common.output}"/targets"
      format = ${common.output-format}
    }
    drugs = ${drug.outputs}
  }
  output {
    format = ${common.output-format}
    path = ${common.output}"/knownDrugsAggregated"
  }
}

evidences {
  outputs {
    succeeded {
      format = ${common.output-format}
      path = ${common.output}"/evidence"
      partition-by = ["sourceId"]
    }
    failed {
      format = ${common.output-format}
      path = ${common.error}"/evidence"
      partition-by = ["sourceId"]
      generate-metadata = false
    }
  }

  inputs {
    raw-evidences {
      format = "json"
      path = ${common.input}"/evidence-files//*"
    }
    diseases {
      format = ${common.output-format}
      path = ${common.output}"/diseases"
    }
    targets {
      format = ${common.output-format}
      path = ${common.output}"/targets"
    }
    mechanism-of-action = ${drug.outputs.mechanism-of-action}
  }

  direction-of-effect {
    var-filter-lof = [
      // High impact variants https://www.ensembl.org/info/genome/variation/prediction/predicted_data.html
      "SO_0001589",  // frameshit_variant
      "SO_0001587",  // stop_gained
      "SO_0001574",  // splice_acceptor_variant
      "SO_0001575",  // splice_donor_variant
      "SO_0002012",  // start_lost
      "SO_0001578",  // stop_lost
      "SO_0001893",  // transcript_ablation
    ]
    gof = ["SO_0002053"]
    lof = ["SO_0002054"]
    oncotsg-list = [
      "TSG",
      "oncogene",
      "Oncogene",
      "oncogene",
      "oncogene,TSG",
      "TSG,oncogene",
      "fusion,oncogene",
      "oncogene,fusion",
    ]
    inhibitors = [
      "RNAI INHIBITOR",
      "NEGATIVE MODULATOR",
      "NEGATIVE ALLOSTERIC MODULATOR",
      "ANTAGONIST",
      "ANTISENSE INHIBITOR",
      "BLOCKER",
      "INHIBITOR",
      "DEGRADER",
      "INVERSE AGONIST",
      "ALLOSTERIC ANTAGONIST",
      "DISRUPTING AGENT"
    ]
    activators = [
      "PARTIAL AGONIST",
      "ACTIVATOR",
      "POSITIVE ALLOSTERIC MODULATOR",
      "POSITIVE MODULATOR",
      "AGONIST",
      "SEQUESTERING AGENT",
      "STABILISER"
    ]
    sources = [
       "ot_genetics_portal",
       "gene_burden",
       "eva",
       "eva_somatic",
       "gene2phenotype",
       "orphanet",
       "cancer_gene_census",
       "intogen",
       "impc",
       "chembl",
   ]
  }

  unique-fields = [
    "targetId",
    "targetFromSourceId",
    "diseaseId",
    "datasourceId"
  ]
  score-expr = "resourceScore"
  datatype-id = "other"
  data-sources-exclude = []
  data-sources = [
    {
      id: "chembl",
      unique-fields: [
        "drugId",
        "urls.url"
      ],
      score-expr: """
        element_at(map(cast(0.5 as double), 0.05, cast(1.0 as double), 0.1, cast(2.0 as double), 0.2, cast(3.0 as double), 0.7, cast(4.0 as double), 1.0), clinicalPhase) *
        case
        when studyStopReasonCategories is null then
          double(1.0)
        else
          array_min(
            transform(
              studyStopReasonCategories,
                x -> element_at(
                  map(
                      'Another study', double(1.0),
                      'Business or administrative', double(1.0),
                      'COVID-19', double(1.0),
                      'Ethical reason', double(1.0),
                      'Insufficient data', double(1.0),
                      'Insufficient enrollment', double(1.0),
                      'Interim analysis', double(1.0),
                      'Invalid reason', double(1.0),
                      'Logistics or resources', double(1.0),
                      'Met endpoint', double(1.0),
                      'Negative', double(0.5),
                      'No context', double(1.0),
                      'Regulatory', double(1.0),
                      'Safety or side effects', double(0.5),
                      'Study design', double(1.0),
                      'Study staff moved', double(1.0),
                      'Success', double(1.0),
                      'Uncategorised', double(1.0)
                  ),
               x)
             )
           )
        end
      """
    },
    {
      id: "crispr_screen",
      unique-fields: [
        "studyId",
        "targetFromSourceId",
        "diseaseFromSourceMappedId"
      ],
      score-expr: "pvalue_linear_score(resourceScore, 0.5, 0.005, 0.0, 1.0)"
    },
    {
      id: "europepmc",
      unique-fields: [
        "literature"
      ],
      score-expr: "array_min(array(resourceScore / 100.0, 1.0))"
    },
    {
      id: "eva",
      datatype-id: "genetic_association",
      unique-fields: [
        "studyId",
        "variantId"
      ],
      score-expr: """
      coalesce(array_max(
        transform(
          clinicalSignificances,
          x -> element_at(
            map(
              'association not found', 0.0,
              'benign', 0.0,
              'not provided', 0.0,
              'likely benign', 0.0,
              'likely risk allele', 0.3,
              'low penetrance', 0.3,
              'conflicting interpretations of pathogenicity', 0.3,
              'conflicting data from submitters', 0.3,
              'other', 0.3,
              'uncertain significance', 0.3,
              'uncertain risk allele', 0.3,
              'established risk allele', 0.5,
              'risk factor', 0.5,
              'affects', 0.5,
              'likely pathogenic', 0.7,
              'confers sensitivity', 0.9,
              'association', 0.9,
              'drug response', 0.9,
              'protective', 0.9,
              'pathogenic', 0.9
              ),
            x)
        )
      ), 0.0) + coalesce(element_at(
        map(
          'practice guideline', 0.1,
          'reviewed by expert panel', 0.07,
          'criteria provided, multiple submitters, no conflicts', 0.05,
          'criteria provided, conflicting interpretations', 0.02,
          'criteria provided, single submitter', 0.02,
          'no assertion for the individual variant', 0.0,
          'no assertion criteria provided', 0.0,
          'no assertion provided', 0.0
        ),
        confidence
      ), 0.0)
      """
    },
    {
      id: "eva_somatic",
      unique-fields: [
        "studyId",
        "variantId"
      ],
      score-expr: """
      coalesce(array_max(
        transform(
          clinicalSignificances,
          x -> element_at(
            map(
              'association not found', 0.0,
              'benign', 0.0,
              'not provided', 0.0,
              'likely benign', 0.0,
              'likely risk allele', 0.3,
              'conflicting interpretations of pathogenicity', 0.3,
              'conflicting data from submitters', 0.3,
              'other', 0.3,
              'uncertain significance', 0.3,
              'low penetrance', 0.3,
              'uncertain risk allele', 0.3,
              'established risk allele', 0.5,
              'risk factor', 0.5,
              'affects', 0.5,
              'likely pathogenic', 0.7,
              'confers sensitivity', 0.9,
              'association', 0.9,
              'drug response', 0.9,
              'protective', 0.9,
              'pathogenic', 0.9
              ),
            x)
        )
      ), 0.0) + coalesce(element_at(
        map(
          'practice guideline', 0.1,
          'reviewed by expert panel', 0.07,
          'criteria provided, multiple submitters, no conflicts', 0.05,
          'criteria provided, conflicting interpretations', 0.02,
          'criteria provided, single submitter', 0.02,
          'no assertion for the individual variant', 0.0,
          'no assertion criteria provided', 0.0,
          'no assertion provided', 0.0
        ),
        confidence
      ), 0.0)
      """
    },
    {
      excluded-biotypes: [
        "IG_C_pseudogene",
        "IG_J_pseudogene",
        "IG_pseudogene",
        "IG_V_pseudogene",
        "polymorphic_pseudogene",
        "processed_pseudogene",
        "pseudogene",
        "rRNA",
        "rRNA_pseudogene",
        "snoRNA",
        "snRNA",
        "transcribed_processed_pseudogene",
        "transcribed_unitary_pseudogene",
        "transcribed_unprocessed_pseudogene",
        "TR_J_pseudogene",
        "TR_V_pseudogene",
        "unitary_pseudogene",
        "unprocessed_pseudogene"
      ],
      id: "expression_atlas",
      unique-fields: [
        "contrast",
        "studyId"
      ],
      score-expr: "array_min(array(1.0, pvalue_linear_score_default(resourceScore) * (abs(log2FoldChangeValue) / 10) * (log2FoldChangePercentileRank / 100)))"
    },
    {
      id: "gene_burden",
      datatype-id: "genetic_association",
      unique-fields: [
        "ancestryId",
        "diseaseFromSource"
        "statisticalMethod",
        "projectId"
      ],
      score-expr: "pvalue_linear_score(resourceScore, 1e-7, 1e-17, 0.25, 1.0)"
    },
    {
      id: "gene2phenotype",
      datatype-id: "genetic_association",
      unique-fields: [
        "diseaseFromSource",
        "allelicRequirements",
        "studyId"
      ],
      score-expr: """
      element_at(
        map(
          'definitive', 1.0,
          'both RD and IF', 1.0,
          'strong', 1.0,
          'moderate', 0.5,
          'limited', 0.01
        ),
        confidence
      )
      """
    },
    {
      id: "genomics_england",
      datatype-id: "genetic_association",
      unique-fields: [
        "diseaseFromSource",
        "studyId"
      ],
      score-expr: """
      element_at(
        map(
          'amber', 0.5,
          'green', 1.0
        ),
        confidence
      )
      """
    },
    {
      id: "intogen",
      unique-fields: [
        "cohortShortName"
      ],
      score-expr: "pvalue_linear_score(resourceScore, 0.1, 1e-10, 0.25, 1.0)"
    },
    {
      id: "ot_genetics_portal",
      datatype-id: "genetic_association"
      unique-fields: [
        "studyId",
        "variantId"
      ],
      score-expr: "resourceScore"
    },
    {
      id: "ot_crispr",
      datatype-id: "ot_partner",
      unique-fields: [
        "studyId",
        "diseaseFromSourceMappedId",
        "targetFromSourceId",
        "resourceScore",
        "statisticalTestTail"
      ],
      score-expr: "1.0"
    },
    {
      id: "encore",
      datatype-id: "ot_partner",
      unique-fields: [
        "targetFromSourceId",
        "interactingTargetFromSourceId",
        "diseaseFromSourceMappedId",
        "cellType"
      ],
      score-expr: "pvalue_linear_score(geneticInteractionPValue, 1.0, 0.01, 0.0, 1.0)"
    },
    {
      id: "ot_crispr_validation",
      unique-fields: [
        "targetFromSourceId", "diseaseFromSourceMappedId", "resourceScore"
      ],
      score-expr: "element_at(map('significant', 1.0, 'not significant', 0.0), confidence)"
    },
    {
      id: "orphanet",
      datatype-id: "genetic_association",
      unique-fields: [
        "diseaseFromSourceId"
      ],
      score-expr: "element_at(map('Assessed', 1.0,'Not yet assessed', 0.5), confidence)"
    },
    {
      id: "impc",
      unique-fields: [
        "diseaseFromSource",
        "biologicalModelAllelicComposition",
        "targetInModel",
        "biologicalModelGeneticBackground"
      ],
      score-expr: "resourceScore / 100"
    },
    {
      id: "crispr",
      score-expr: "linear_rescale(resourceScore, 41.5, 100, 0.415, 1.0)",
      unique-fields: []
    },
    {
      id: "progeny",
      unique-fields: [
        "pathways",
        "diseaseFromSource"
      ],
      score-expr: "pvalue_linear_score(resourceScore, 1e-4, 1e-14, 0.5, 1.0)"
    },
    {
      id: "reactome",
      unique-fields: [
        "variantAminoacidDescriptions",
        "targetModulation",
        "reactionId"
      ],
      score-expr: "1.0"
    },
    {
      id: "slapenrich",
      unique-fields: [
        "pathways",
        "diseaseFromSource"
      ],
      score-expr: "pvalue_linear_score(resourceScore, 1e-4, 1e-14, 0.5, 1.0)"
    },
    {
      id: "sysbio",
      unique-fields: [
        "studyOverview",
        "literature",
        "pathways"
      ],
      score-expr: "resourceScore"
    },
    {
      id: "uniprot_literature"
      datatype-id: "genetic_association"
      unique-fields: [
        "diseaseFromSource",
      ],
      score-expr: """
      element_at(
        map(
          'high', 1.0,
          'medium', 0.5
        ),
        confidence
      )
      """

    },
    {
      id: "uniprot_variants"
      datatype-id: "genetic_association"
      unique-fields: [
        "diseaseFromSource",
        "variantRsId"
      ],
      score-expr: """
      element_at(
        map(
          'high', 1.0,
          'medium', 0.5
        ),
        confidence
      )
      """

    },
    {
      id: "clingen"
      datatype-id: "genetic_association"
      unique-fields: [
        "diseaseFromSource",
        "studyId",
        "allelicRequirements",
      ],
      score-expr: """
      element_at(
        map(
          'No Known Disease Relationship', 0.01,
          'Refuted', 0.01,
          'Disputed', 0.01,
          'Limited', 0.01,
          'Moderate', 0.5,
          'Strong', 1.0,
          'Definitive', 1.0
        ),
        confidence
      )
      """
    },
    {
      id: "cancer_biomarkers"
      unique-fields: [
        "biomarkerName",
        "confidence",
        "diseaseFromSource",
        "drugFromSource",
        "drugResponse"
      ],
      score-expr: "1.0"
    }
  ]
}

facet-search {
  inputs = {
    diseases = ${disease.outputs.diseases}
    targets {
      path = ${common.output}"/targets"
      format = ${common.output-format}
    }
  }
  outputs {
    targets {
      format = ${common.output-format}
      path = ${common.output}"/facetSearchTarget"
    }
    diseases {
      format = ${common.output-format}
      path = ${common.output}"/facetSearchDisease"
    }
  }
}

gene-ontology {
  go-input = {
    format = "csv"
    path = ${common.input}"/gene-ontology-inputs/go.obo"
  }
  output {
    format = ${common.output-format}
    path = ${common.output}"/go"

  }
}

associations {
  outputs = {
    direct-by-datatype = {
      format = ${common.output-format}
      path = ${common.output}"/associationByDatatypeDirect"
    }
    direct-by-datasource = {
      format = ${common.output-format}
      path = ${common.output}"/associationByDatasourceDirect"
    }
    direct-by-overall = {
      format = ${common.output-format}
      path = ${common.output}"/associationByOverallDirect"
    }
    indirect-by-datasource = {
      format = ${common.output-format}
      path = ${common.output}"/associationByDatasourceIndirect"
    }
    indirect-by-datatype = {
      format = ${common.output-format}
      path = ${common.output}"/associationByDatatypeIndirect"
    }
    indirect-by-overall = {
      format = ${common.output-format}
      path = ${common.output}"/associationByOverallIndirect"
    }
  }
  inputs = {
    evidences = ${evidences.outputs.succeeded}
    diseases {
      path = ${common.output}"/diseases"
      format = ${common.output-format}
    }
  }

  default-weight = 1.0
  default-propagate = true
  data-sources = [
    {id: "europepmc", weight: 0.2, data-type = "literature", propagate = true},
    {id: "expression_atlas", weight: 0.2, data-type = "rna_expression", propagate = false},
    {id: "impc", weight: 0.2, data-type = "animal_model", propagate = true},
    {id: "progeny", weight: 0.5, data-type = "affected_pathway", propagate = true},
    {id: "slapenrich", weight: 0.5, data-type = "affected_pathway", propagate = true},
    {id: "sysbio", weight: 0.5, data-type = "affected_pathway", propagate = true},
    {id: "cancer_biomarkers", weight: 0.5, data-type = "affected_pathway", propagate = true},
    {id: "ot_crispr", weight: 0.5, data-type = "ot_partner", propagate = true},
    {id: "ot_crispr_validation", weight: 0.5, data-type = "ot_validation_lab", propagate = true},
    {id: "encore", weight: 0.5, data-type = "ot_partner", propagate = true},
  ]
}

aotf {
  outputs = {
    clickhouse = {
      format = ${common.output-format}
      path = ${common.output}"/AOTFClickhouse"
    }
    elasticsearch = {
      format = "json"
      path = ${common.output}"/AOTFElasticsearch"
    }
  }

  inputs = {
    evidences = ${evidences.outputs.succeeded}
    diseases = ${disease.outputs.diseases}
    targets {
      path = ${common.output}"/targets"
      format = ${common.output-format}
    }
  }
}

search {
  inputs = {
    evidences = ${evidences.outputs.succeeded}
    diseases = ${disease.outputs.diseases}
    disease-hpo = ${disease.outputs.disease-hpo}
    hpo = ${disease.outputs.hpo}
    targets {
      path = ${common.output}"/targets"
      format = ${common.output-format}
    }
    drugs = ${drug.outputs}
    associations = ${associations.outputs.indirect-by-overall}
  }
  outputs {
    targets {
      format = ${common.output-format}
      path = ${common.output}"/searchTarget"
    }
    diseases {
      format = ${common.output-format}
      path = ${common.output}"/searchDisease"
    }
    drugs {
      format = ${common.output-format}
      path = ${common.output}"/searchDrug"
    }
  }
}

// OpenFDA FAERS Configuration

openfda {
  // NOTE - Each step seems to have a common baseline path that should be refactored
  step-root-input-path = ${common.input}"/fda-inputs"
  step-root-output-path = ${common.output}"/fda"
  // Source data
  chembl-drugs {
    format = ${common.output-format}
    path = ${drug.outputs.drug.path}
  }
  fda-data {
    format = "json"
    path = ${openfda.step-root-input-path}"/*.jsonl"
  }
  blacklisted-events {
    format = "csv"
    path = ${openfda.step-root-input-path}"/blacklisted_events.txt"
    options = [
      {k: "sep", v: "\\t"},
      {k: "ignoreLeadingWhiteSpace", v: "true"},
      {k: "ignoreTrailingWhiteSpace", v: "true"}
    ]
  }
  meddra {
    meddra-preferred-terms {
      format = "csv"
      // Change this to whatever location the data is sitting on
      path = "gs://open-targets-data-releases-private/meddra/meddra23.1/MedAscii/pt.asc"
    }
    meddra-low-level-terms {
      format = "csv"
      // Change this to whatever location the data is sitting on
      path = "gs://open-targets-data-releases-private/meddra/meddra23.1/MedAscii/llt.asc"
    }
  }
  meddra-preferred-terms-cols = ["pt_code", "pt_name"]
  meddra-low-level-terms-cols = ["llt_code", "llt_name"]
  montecarlo {
    permutations: 100
    percentile: 0.95
  }
  sampling {
    size = 0.1
    enabled = false
  }
  outputs = {
    fda-unfiltered {
      format = ${common.output-format}
      path = ${openfda.step-root-output-path}"/adverseDrugReactions"
    }
    fda-results {
      format = ${common.output-format}
      path = ${openfda.step-root-output-path}"/significantAdverseDrugReactions"
    }
    fda-targets-unfiltered {
      format = ${common.output-format}
      path = ${openfda.step-root-output-path}"/adverseTargetReactions"
    }
    fda-targets-results {
      format = ${common.output-format}
      path = ${openfda.step-root-output-path}"/significantAdverseTargetReactions"
    }
    sampling {
      format = ${common.output-format}
      path = ${openfda.step-root-output-path}"/sample"
    }
    sampling-targets {
      format = ${common.output-format}
      path = ${openfda.step-root-output-path}"/sampleTargets"
    }
  }

}

ebisearch {
  disease-etl = ${disease.outputs.diseases}
  target-etl {
    format = ${common.output-format}
    path = ${common.output}"/targets"
  }
  evidence-etl {
    format = ${common.output-format}
    path = ${evidences.outputs.succeeded.path}"/sourceId=ot_genetics_portal/"
  }
  association-etl = ${associations.outputs.direct-by-overall}
  outputs = {
    ebisearch-associations {
      format = ${common.output-format}
      path = ${common.output}"/ebisearchAssociations"
    }
    ebisearch-evidence {
      format = ${common.output-format}
      path = ${common.output}"/ebisearchEvidence"
    }
  }
}


otarproject {
  disease-etl = ${disease.outputs.diseases}
  otar-meta {
    format = "csv"
    path = ${common.input}"/otar-inputs/otar_meta.csv"
    options = [
      {k: "sep", v: ","},
      {k: "header", v: "true"}
      {k: "inferSchema", v: "true"}
    ]
  }
  otar-project-to-efo {
    format = "csv"
    path = ${common.input}"/otar-inputs/otar_project_to_efo.csv"
    options = [
      {k: "sep", v: ","},
      {k: "header", v: "true"}
      {k: "inferSchema", v: "true"}
    ]
  }
  output = {
    format = ${common.output-format}
    path = ${common.output}"/otar_projects"
  }
}

literature {

  // Bucket name information
  input = ${common.input}"/literature-inputs"
  output = ${common.output}"/literature"

  common = {
    publication-section-ranks = [
      {section: "title", rank: 1, weight: 1}
      {section: "abstract", rank: 1, weight: 0.8}
      {section: "concl", rank: 1, weight: 0.7}
      {section: "results", rank: 2, weight: 0.6}
      {section: "discuss", rank: 2, weight: 0.5}
      {section: "methods", rank: 3, weight: 0.3}
      {section: "other", rank: 4, weight: 0.1}
    ]

    spark-session-config = [
      {k: "spark.sql.mapKeyDedupPolicy", v: "LAST_WIN"}
    ]
  }

  processing {

    // When preparing the literature outputs we can optionally save all the
    // entities which did not match. These are not used for anything down-stream
    // and are only useful for debugging and quality control. Setting this value
    // to true will result in additional outputs 'failedMatches' and 'failedCoocs'
    // being written. Note, this slows down the process significantly.
    write-failures = true
    epmcids {
      format = "csv"
      path = ${literature.input}"/PMID_PMCID_DOI.csv.gz"
      options = [
        {k: "header", v: "true"}
        {k: "inferSchema", v: "true"}
      ]
    }
    diseases {
      format = ${common.output-format}
      path = ${common.output}"/diseases"
    }

    targets {
      format = ${common.output-format}
      path = ${common.output}"/targets"
    }
    drugs {
      format = ${common.output-format}
      path = ${common.output}"/molecule"
    }
    abstracts {
      kind = "Abstracts"
      input {
        format = "json"
        path = "gs://otar025-epmc/ml02/abstract/**/*.jsonl"
      }
    }
    full-texts {
      kind = "Full-text"
      input {
        format = "json"
        path = "gs://otar025-epmc/ml02/fulltext/**/*.jsonl"
      }
    }
    outputs = {
      cooccurrences {
        format = ${common.output-format}
        path = ${literature.output}"/cooccurrences"
      }
      matches {
        format = ${common.output-format}
        path = ${literature.output}"/matches"
      }
      literature-index {
        format = ${common.output-format}
        path = ${literature.output}"/literatureIndex"
      }
      literature-sentences {
        format = ${common.output-format}
        path = ${literature.output}"/literatureSentences"
      }
      failed-cooccurrences {
        format = ${common.output-format}
        path = ${literature.output}"/failedCooccurrences"
      }
      failed-matches {
        format = ${common.output-format}
        path = ${literature.output}"/failedMatches"
      }
    }
  }

  embedding {
    model-configuration {
      window-size = 10
      num-partitions = 16
      max-iter = 3
      min-count = 1
      step-size = 0.02
    }
    input = ${literature.processing.outputs.matches}
    outputs = {
      model = {
        format = ${common.output-format}
        path = ${literature.output}"/W2VModel"
      }
      training-set = {
        format = ${common.output-format}
        path = ${literature.output}"/trainingSet"
      }
    }
  }

  vectors {
    input = ${literature.embedding.outputs.model.path}
    output {
      format = ${common.output-format}
      path = ${literature.output}"/vectors"
    }
  }
}

target-engine {
  inputs {
    targets = ${target.outputs.target}
    molecule = ${drug.outputs.drug}
    mechanism-of-action = ${drug.outputs.mechanism-of-action}
    mouse-phenotypes = {
      format = ${common.output-format}
      path = ${common.output}"/mousePhenotypes"
    }
    hpa-data = {
      format = "json"
      path = ${common.input}"/targetEngine-inputs/proteinatlas.json.gz"
    }
    uniprot-slterms = {
      format = "csv"
      path = ${common.input}"/targetEngine-inputs/uniprot_locations.tsv.gz"
      options = [
        {k: "header", v: "true"},
        {k: "sep", v: "\t"},
      ]
    }
    mouse-pheno-scores = {
      format = "csv"
      path = ${common.input}"/targetEngine-inputs/mouse_pheno_scores.csv"
      options = [
            {k: "sep", v: ","},
            {k: "header", v: "true"}
            {k: "inferSchema", v: "true"}
          ]
    }
  }
  outputs {
    target-engine = {
      path = ${common.output}"/targetPrioritisation"
      format = ${common.output-format}
    }
  }
}
