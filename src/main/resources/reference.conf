spark-uri = null
common {
  default-steps = [
    "disease",
    "target",
    "drug",
    "reactome",
    "eco",
    "interactions",
    "cancerBiomarkers",
    "expression",
    "mousePhenotypes",
    "evidence",
    "association",
    "associationOTF",
    "knownDrugs",
    "search"
  ]
  output-format = "parquet"
  output = "gs://ot-snapshots/etl/latest"
  output = ${?OT_ETL_OUTPUT}

  metadata {
    format = "json"
    path = ${common.output}"/metadata/"
  }

  input = "gs://open-targets-data-releases/21.02/input"

  inputs {
    eco {
      format = "parquet"
      path = "gs://ot-snapshots/parquet/20.06/parquet/eco_parquet"
    }
    expression {
      format = "parquet"
      path = "gs://ot-snapshots/parquet/20.06/parquet/expression_parquet/"
    }
    mousephenotypes {
      format = "json"
      path = "gs://ot-snapshots/jsonl/20.06/parquet/20.06/parquet_mousephenotypes.json"
    }
    reactome {
      format = "parquet"
      path = "gs://ot-snapshots/parquet/20.06/parquet/rea_parquet"
    }
    target {
      format = "parquet"
      path = "gs://ot-snapshots/parquet/20.06/parquet/gene_parquet"
    }
    tep {
      format = "json"
      path = "gs://ot-snapshots/jsonl/20.06/tep-2020-06-01.json"
    }
  }
}

interactions {
  scorethreshold = 0
  target-etl {
    format = ${common.output-format}
    path = ${common.output}"/targets"
  }
  rnacentral {
    format = "csv"
    path = "gs://ot-snapshots/etl/inputs/21.02/jsonl/interactions-new/rna_central_ensembl.tsv"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "false"}
    ]
  }
  humanmapping {
    format = "csv"
    path = "gs://ot-snapshots/etl/inputs/21.02/jsonl/interactions-new/HUMAN_9606_idmapping.dat.gz"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "false"}
    ]
  }
  ensproteins {
    format = "csv"
    path = "gs://ot-snapshots/etl/inputs/21.02/jsonl/interactions-new/Homo_sapiens.GRCh38.chr.gtf.gz"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "false"},
      {k: "comment", v: "#"}
    ]
  }
  intact {
    format = "json"
    path = "gs://ot-snapshots/etl/inputs/21.02/jsonl/interactions-new/string-interactions-2021-03-09.json.gz"
  }
  strings {
      format = "json"
      path = "gs://open-targets-data-releases/21.02/input/annotation-files/interactions/string-interactions-2021-02-05.json.gz"
    }
  outputs = {
    interactions {
      format = ${common.output-format}
      path = ${common.output}"/interaction"
    }
    interactions-evidence {
      format = ${common.output-format}
      path = ${common.output}"/interactionEvidence"
    }
  }
}

disease {
  efo-ontology {
    format = "json"
    path = ${common.input}"/annotation-files/ontology/efo_json/ontology-efo-v3.26.0.jsonl"
  }
  hpo-ontology {
    format = "json"
    path = ${common.input}"/annotation-files/ontology/efo_json/ontology-hpo.jsonl"
  }
  mondo-ontology {
    format = "json"
    path = ${common.input}"/annotation-files/ontology/efo_json/ontology-mondo.jsonl"
  }
  hpo-phenotype {
    format = "json"
    path = ${common.input}"/annotation-files/ontology/efo_json/hpo-phenotypes-2021-02-08.jsonl"
  }
  outputs = {
    diseases {
      format = ${common.output-format}
      path = ${common.output}"/disease"
    }
    hpo {
      format = ${common.output-format}
      path = ${common.output}"/hpo"
    }
    disease-hpo {
      format = ${common.output-format}
      path = ${common.output}"/diseaseToPhenotype"
    }
  }
}

drug {
  chembl-molecule {
    format = "json"
    path = ${common.input}"/annotation-files/chembl_es/chembl_27_molecule-2020-10-08.jsonl"
  }
  chembl-indication {
    format = "json"
    path = ${common.input}"/annotation-files/chembl_es/chembl_27_drug_indication-2020-10-08.jsonl"
  }
  chembl-mechanism {
    format = "json"
    path = ${common.input}"/annotation-files/chembl_es/chembl_27_mechanism-2021-01-22.jsonl"
  }
  chembl-target {
    format = "json"
    path = ${common.input}"/annotation-files/chembl_es/chembl_27_target-2020-10-08.jsonl"
  }
  disease-etl = ${disease.outputs.diseases}
  target-etl {
    format = ${common.output-format}
    path = ${common.output}"/targets"
  }
  evidence-etl = ${evidences.outputs.succeeded}
  drugbank-to-chembl {
    format = "csv"
    path = "gs://ot-team/jarrod/drugbank/db.csv.gz"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "true"}
    ]
  }
  drug-extensions = [
    {
      extension-type = "synonym"
      input {
        path = "gs://ot-team/jarrod/drugbank/db.json"
        format = "json"
      }
    }
  ]
  outputs = {
    drug {
      format = ${common.output-format}
      path = ${common.output}"/molecule"
    }
    mechanism-of-action {
      format = ${common.output-format}
      path = ${common.output}"/mechanismOfAction"
    }
    indications {
      format = ${common.output-format}
      path = ${common.output}"/indication"
    }
  }
}

known-drugs {
  inputs = {
    evidences = ${evidences.outputs.succeeded}
    diseases = ${disease.outputs.diseases}
    targets {
      path = ${common.output}"/targets"
      format = ${common.output-format}
    }
    drugs = ${drug.outputs}
  }
  output {
    format = ${common.output-format}
    path = ${common.output}"/knownDrugsAggregated"
  }
}

evidences {
  outputs {
    succeeded {
      format = ${common.output-format}
      path = ${common.output}"/evidence"
      partition-by = ["sourceId"]
    }
    failed {
      format = ${common.output-format}
      path = ${common.output}"/evidenceFailed"
      partition-by = ["sourceId"]
    }
  }

  inputs {
    raw-evidences {
      format = "json"
      path = "/home/mkarmona/src/opentargets/data/platform/20.11/evidences-raw/"
    }
    diseases {
      format = ${common.output-format}
      path = ${common.output}"/diseases"
    }
    targets {
      format = ${common.output-format}
      path = ${common.output}"/targets"
    }
  }

  unique-fields = [
    "targetId",
    "targetFromSourceId",
    "diseaseId",
    "datasourceId"
  ]

  score-expr = "resourceScore"
  datatype-id = "other"

  data-sources = [
    {
      id: "chembl",
      unique-fields: [
        "drugId",
        "urls.url"
      ],
      score-expr: "element_at(map(0, 0.09, 1, 0.1, 2, 0.2, 3, 0.7, 4, 1.0), clinicalPhase)"
    },
    {
      id: "europepmc",
      unique-fields: [
        "literature"
      ],
      score-expr: "array_min(array(resourceScore / 100.0, 1.0))"
    },
    {
      id: "eva",
      datatype-id: "genetic_association",
      unique-fields: [
        "studyId",
        "variantRsId"
      ],
      score-expr: """
      coalesce(array_max(
        transform(
          clinicalSignificances,
          x -> element_at(
            map(
              'association not found', 0.0,
              'benign', 0.0,
              'not provided', 0.0,
              'likely benign', 0.0,
              'conflicting interpretations of pathogenicity', 0.3,
              'other', 0.3,
              'uncertain significance', 0.3,
              'risk factor', 0.5,
              'affects', 0.5,
              'likely pathogenic', 1.0,
              'association', 1.0,
              'drug response', 1.0,
              'protective', 1.0,
              'pathogenic', 1.0
              ),
            x)
        )
      ), 0.0) + coalesce(element_at(
        map(
          'practice guideline', 0.1,
          'reviewed by expert panel', 0.07,
          'criteria provided, multiple submitters, no conflicts', 0.05,
          'criteria provided, conflicting interpretations', 0.02,
          'criteria provided, single submitter', 0.02,
          'no assertion for the individual variant', 0.0,
          'no assertion criteria provided', 0.0,
          'no assertion provided', 0.0
        ),
        confidence
      ), 0.0)
      """
    },
    {
      id: "eva_somatic",
      unique-fields: [
        "studyId",
        "variantRsId"
      ],
      score-expr: """
      coalesce(array_max(
        transform(
          clinicalSignificances,
          x -> element_at(
            map(
              'association not found', 0.0,
              'benign', 0.0,
              'not provided', 0.0,
              'likely benign', 0.0,
              'conflicting interpretations of pathogenicity', 0.3,
              'other', 0.3,
              'uncertain significance', 0.3,
              'risk factor', 0.5,
              'affects', 0.5,
              'likely pathogenic', 1.0,
              'association', 1.0,
              'drug response', 1.0,
              'protective', 1.0,
              'pathogenic', 1.0
              ),
            x)
        )
      ), 0.0) + coalesce(element_at(
        map(
          'practice guideline', 0.1,
          'reviewed by expert panel', 0.07,
          'criteria provided, multiple submitters, no conflicts', 0.05,
          'criteria provided, conflicting interpretations', 0.02,
          'criteria provided, single submitter', 0.02,
          'no assertion for the individual variant', 0.0,
          'no assertion criteria provided', 0.0,
          'no assertion provided', 0.0
        ),
        confidence
      ), 0.0)
      """
    },
    {
      excluded-biotypes: [
        "IG_C_pseudogene",
        "IG_J_pseudogene",
        "IG_pseudogene",
        "IG_V_pseudogene",
        "polymorphic_pseudogene",
        "processed_pseudogene",
        "pseudogene",
        "rRNA",
        "rRNA_pseudogene",
        "snoRNA",
        "snRNA",
        "transcribed_processed_pseudogene",
        "transcribed_unitary_pseudogene",
        "transcribed_unprocessed_pseudogene",
        "TR_J_pseudogene",
        "TR_V_pseudogene",
        "unitary_pseudogene",
        "unprocessed_pseudogene"
      ],
      id: "expression_atlas",
      unique-fields: [
        "contrast",
        "studyId"
      ],
      score-expr: "array_min(array(1.0, pvalue_linear_score_default(resourceScore) * (abs(log2FoldChangeValue) / 10) * (log2FoldChangePercentileRank / 100)))"
    },
    {
      id: "gene2phenotype",
      datatype-id: "genetic_association",
      unique-fields: [
        "diseaseFromSource",
        "allelicRequirements",
        "studyId"
      ],
      score-expr: """
      element_at(
        map(
          'possible', 0.25,
          'probable', 0.5,
          'confirmed', 1.0,
          'both RD and IF', 1.0,
          'child IF', 1.0
        ),
        confidence
      )
      """
    },
    {
      id: "genomics_england",
      datatype-id: "genetic_association",
      unique-fields: [
        "diseaseFromSource",
        "studyId"
      ],
      score-expr: """
      element_at(
        map(
          'amber', 0.5,
          'green', 1.0
        ),
        confidence
      )
      """
    },
    {
      id: "intogen",
      unique-fields: [
        "cohortShortName"
      ],
      score-expr: "pvalue_linear_score(resourceScore, 0.1, 1e-10, 0.25, 1.0)"
    },
    {
      id: "ot_genetics_portal",
      datatype-id: "genetic_association"
      unique-fields: [
        "studyId",
        "variantId"
      ],
      score-expr: "resourceScore"
    },
    {
      id: "phenodigm",
      unique-fields: [
        "diseaseFromSource",
        "biologicalModelAllelicComposition",
        "targetInModel",
        "biologicalModelGeneticBackground"
      ],
      score-expr: "resourceScore"
    },
    {
      id: "phewas_catalog",
      datatype-id: "genetic_association",
      unique-fields: [
        "diseaseFromSource",
        "variantRsId"
      ],
      score-expr: "linear_rescale(studyCases, 0.0, 8800.0, 0.0, 1.0) * pvalue_linear_score(resourceScore, 0.5, 1e-25, 0.0, 1.0)"
    },
    {
      id: "progeny",
      unique-fields: [
        "pathwayId",
        "diseaseFromSource"
      ],
      score-expr: "pvalue_linear_score(resourceScore, 1e-4, 1e-14, 0.5, 1.0)"
    },
    {
      id: "reactome",
      unique-fields: [
        "variantAminoacidDescriptions",
        "targetModulation",
        "reactionId"
      ],
      score-expr: "1.0"
    },
    {
      id: "slapenrich",
      unique-fields: [
        "pathwayId",
        "diseaseFromSource"
      ],
      score-expr: "pvalue_linear_score(resourceScore, 1e-4, 1e-14, 0.5, 1.0)"
    },
    {
      id: "sysbio",
      unique-fields: [
        "studyOverview",
        "literature",
        "pathwayName"
      ],
      score-expr: "resourceScore"
    },
    {
      id: "uniprot_literature"
      datatype-id: "genetic_association"
      unique-fields: [
        "diseaseFromSource",
      ],
      score-expr: "resourceScore"
    },
    {
      id: "clingen"
      datatype-id: "genetic_association"
      unique-fields: [
        "diseaseFromSource",
        "studyId",
        "allelicRequirements",
      ],
      score-expr: """
      element_at(
        map(
          'No Reported Evidence', 0.01,
          'Refuted', 0.01,
          'Disputed', 0.01,
          'Limited', 0.01,
          'Moderate', 0.5,
          'Strong', 1.0,
          'Definitive', 1.0
        ),
        confidence
      )
      """
    }
  ]
}

associations {
  outputs = {
    direct-by-datatype = {
      format = ${common.output-format}
      path = ${common.output}"/associationByDatatypeDirect"
    }
    direct-by-datasource = {
      format = ${common.output-format}
      path = ${common.output}"/associationByDatasourceDirect"
    }
    direct-by-overall = {
      format = ${common.output-format}
      path = ${common.output}"/associationByOverallDirect"
    }
    indirect-by-datasource = {
      format = ${common.output-format}
      path = ${common.output}"/associationByDatasourceIndirect"
    }
    indirect-by-datatype = {
      format = ${common.output-format}
      path = ${common.output}"/associationByDatatypeIndirect"
    }
    indirect-by-overall = {
      format = ${common.output-format}
      path = ${common.output}"/associationByOverallIndirect"
    }
  }
  inputs = {
    evidences = ${evidences.outputs.succeeded}
    diseases {
      path = ${common.output}"/diseases"
      format = ${common.output-format}
    }
    targets {
      path = ${common.output}"/targets"
      format = ${common.output-format}
    }
  }

  default-weight = 1.0
  default-propagate = true
  data-sources = [
    {id: "europepmc", weight: 0.2, data-type = "literature", propagate = true},
    {id: "expression_atlas", weight: 0.2, data-type = "rna_expression", propagate = false},
    {id: "phenodigm", weight: 0.2, data-type = "animal_model", propagate = true},
    {id: "progeny", weight: 0.5, data-type = "affected_pathway", propagate = true},
    {id: "slapenrich", weight: 0.5, data-type = "affected_pathway", propagate = true},
    {id: "sysbio", weight: 0.5, data-type = "affected_pathway", propagate = true},
  ]
}

aotf {
  outputs = {
    clickhouse = {
      format = ${common.output-format}
      path = ${common.output}"/AOTFClickhouse"
    }
    elasticsearch = {
      format = ${common.output-format}
      path = ${common.output}"/AOTFElasticsearch"
    }
  }

  inputs = {
    evidences = ${evidences.outputs.succeeded}
    diseases = ${disease.outputs.diseases}
    targets {
      path = ${common.output}"/targets"
      format = ${common.output-format}
    }
  }
}

search {
  inputs = {
    evidences = ${evidences.outputs.succeeded}
    diseases = ${disease.outputs.diseases}
    disease-hpo = ${disease.outputs.disease-hpo}
    hpo = ${disease.outputs.hpo}
    targets {
      path = ${common.output}"/targets"
      format = ${common.output-format}
    }
    drugs = ${drug.outputs}
    associations = ${associations.outputs.indirect-by-overall}
  }
  outputs {
    targets {
      format = ${common.output-format}
      path = ${common.output}"/searchTarget"
    }
    diseases {
      format = ${common.output-format}
      path = ${common.output}"/searchDisease"
    }
    drugs {
      format = ${common.output-format}
      path = ${common.output}"/searchDrug"
    }
  }
}