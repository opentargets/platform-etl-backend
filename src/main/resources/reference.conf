spark-uri = null

spark-settings {
  // Specifies the behavior when data or table already exists. Options include:
  //   overwrite: overwrite the existing data.
  //   append: append the data.
  //   ignore: ignore the operation (i.e. no-op).
  //   error or errorifexists: default option, throw an exception at runtime.
  // Taken from `DataFrameWrite.scala` scaladoc.
  write-mode = "error"
}
common {
  default-steps = [
    "reactome",
    "disease",
    "target",
    "eco",
    "cancerBiomarkers",
    "expression",
    "mousePhenotypes",
    "evidence",
    "association",
    "associationOTF",
    "drug",
    "knownDrugs",
    "search",
    "interactions"
  ]
  output-format = "parquet"
  output = "gs://open-targets-pre-data-releases/21.06.5/output/etl/parquet"
  output = ${?OT_ETL_OUTPUT}

  metadata {
    format = "json"
    path = ${common.output}"/metadata/"
  }

  input = "gs://open-targets-pre-data-releases/21.06.5/input"

  inputs {
    eco {
      format = "json"
      path = "gs://open-targets-pre-data-releases/21.06.5/input/datapipeline-dump/21.06_eco-data.json"
    }
    expression {
      format = "json"
      path = "gs://open-targets-pre-data-releases/21.06.5/input/datapipeline-dump/21.06_expression-data.json"
    }
    mousephenotypes {
      format = "json"
      path = "gs://open-targets-pre-data-releases/21.06.5/input/datapipeline-dump/mousephenotype.json"
    }
    target {
      format = "json"
      path = "gs://open-targets-pre-data-releases/21.06.5/input/datapipeline-dump/21.06_gene-data.json"
    }
    tep {
      format = "json"
      path = "gs://open-targets-pre-data-releases/21.06.5/input/annotation-files/tep-2021-06-18.json"
    }
  }
}

reactome {
  inputs {
    pathways {
      format = "csv"
      path = ${common.input}"/annotation-files/ReactomePathways-2021-06-18.txt"
      options = [
        {k: "sep", v: "\\t"},
        {k: "header", v: "false"}
        {k: "inferSchema", v: "true"}
      ]
    }
    relations {
      format = "csv"
      path = ${common.input}"/annotation-files/ReactomePathwaysRelation-2021-06-18.txt"
      options = [
        {k: "sep", v: "\\t"},
        {k: "header", v: "false"}
        {k: "inferSchema", v: "true"}
      ]
    }
  }
  output = {
    format = ${common.output-format}
    path = ${common.output}"/reactome"
  }
}


interactions {
  scorethreshold = 0
  target-etl {
    format = ${common.output-format}
    path = ${common.output}"/targets"
  }
  rnacentral {
    format = "csv"
    path = ${common.input}"/annotation-files/interactions/rna_central_ensembl.tsv"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "false"}
    ]
  }
  humanmapping {
   format = "csv"
   path = ${common.input}"/annotation-files/interactions/HUMAN_9606_idmapping.dat.gz"
   options = [
     {k: "sep", v: "\\t"},
     {k: "header", v: "false"}
   ]
  }
  ensproteins {
    format = "csv"
    path = ${common.input}"/annotation-files/interactions/Homo_sapiens.GRCh38.chr.gtf.gz"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "false"},
      {k: "comment", v: "#"}
    ]
  }
  intact {
    format = "json"
    path = ${common.input}"/annotation-files/interactions/intact-interactors-2021-06-07.json"
  }
  strings {
     format = "csv"
     path = ${common.input}"/annotation-files/interactions/9606.protein.links.full_w_homology.v11.0.txt.gz"
     options = [
       {k: "sep", v: " "},
       {k: "header", v: "true"}
     ]
  }
  outputs = {
    interactions {
      format = ${common.output-format}
      path = ${common.output}"/interaction"
    }
    interactions-evidence {
      format = ${common.output-format}
      path = ${common.output}"/interactionEvidence"
    }
    interactions-unmatched {
      format = ${common.output-format}
      path = ${common.output}"/interactionUnmatched"
    }
  }
}

target {
  input {
    chembl = ${drug.chembl-target}
    ensembl {
      format = "json"
      path = ${common.input}"/annotation-files/homo_sapiens_core_104_38_genes.json.gz"
    }
    genetic-constraints = {
      format = "csv"
      path = "gs://ot-snapshots/jsonl/20.06/gnomad_lof_metrics_by_gene.csv"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
        {k: "nullValue", v: "NA"}
      ]
    }
    gene-ontology {
      format = "csv"
      path = ${common.input}"/annotation-files/goa_human.gaf.gz"
      options = [
        {k: "sep", v: "\\t"},
        {k: "comment", v: "!"} // remove all metadata lines beginning with !
      ]
    }
    gene-ontology-rna {
      format = "csv"
      path = ${common.input}"/annotation-files/goa_human_rna.gaf.gz"
      options = [
        {k: "sep", v: "\\t"},
        {k: "comment", v: "!"} // remove all metadata lines beginning with !
      ]
    }
    gene-ontology-rna-lookup {
      format = "csv"
      path = ${common.input}"/annotation-files/ensembl.tsv"
      options = [
        {k: "sep", v: "\\t"}
      ]
    }
    gene-ontology-eco {
      format = "csv"
      path = ${common.input}"/annotation-files/goa_human.gpa.gz"
      options = [
        {k: "sep", v: "\\t"}
        {k: "comment", v: "!"}
      ]
    }
    hallmarks {
      format = "csv"
      path = ${common.input}"/annotation-files/cosmic-hallmarks-*.tsv.gz"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    hgnc {
      format = "json"
      path = ${common.input}"/annotation-files/hgnc_complete_set-2020-11-10.json"
    },
    homology-dictionary {
      format = "csv"
      path = ${common.input}"/annotation-files/species_EnsemblVertebrates.txt"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    homology-coding-proteins {
      format = "csv"
      path = ${common.input}"/annotation-files/Compara.104.*_default.homologies.tsv.gz"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    homology-gene-dictionary {
      format = "csv"
      path = ${common.input}"annotation-files/104_homology_name_id.tsv"
      options = [
        {k: "sep", v: "\\t"}
      ]
    }
    hpa {
      format = "csv"
      path = ${common.input}"/annotation-files/subcellular_location.tsv"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    ncbi {
      format = "csv"
      path = ${common.input}"/annotation-files/Homo_sapiens.gene_info.gz"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    ortholog {
      format = "csv"
      path = ${common.input}"/annotation-files/human_all_hcop_sixteen_column-2020-11-10.txt.gz"
    },
    ps-gene-identifier {
      format = "csv"
      path = ${common.input}"/annotation-files/gene_identifiers_latest.csv.gz"
      options = [
        {k: "header", v: true}
      ]
    }
    ps-essentiality-matrix {
      format = "csv"
      path = ${common.input}"annotation-files/04_binaryDepScores.tsv"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    safety-toxicity {
      format = "csv"
      path = ${common.input}"safety/experimental-tox*.tsv"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    safety-adverse-event {
      format = "parquet"
      path = ${common.input}"safety/adverse-events/*.parquet"
    }
    safety-safety-risk {
      format = "parquet"
      path = ${common.input}"safety/safety-risk/*.parquet"
    }
    tep {
      format = "json"
      path = ${common.input}"annotation-files/tep-2020-06-01.json"
    },
    tractability = {
      format = "csv"
      path = "gs://ot-snapshots/otar001-core/Tractability/21.03/tractability_buckets_new_version.tsv"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    uniprot {
      format = "txt"
      path = ${common.input}"annotation-files/uniprot-2020-11-10.txt.gz"
    }
  }
  outputs {
    target {
      format = ${common.output-format}
      path = ${common.output}"/target-beta"
    }
  }
  hgnc-ortholog-species = [
    "6239-worm",
    "7227-fly",
    "7955-zebrafish",
    "8364-frog",
    "9544-macaque",
    "9598-chimpanzee",
    "9606-human",
    "9615-dog",
    "9823-pig",
    "9986-rabbit",
    "10090-mouse",
    "10116-rat",
    "10141-guineapig",
  ]
}

# Cancerbiomarkers requires four input files:
#  - a tsv of biomarkers from the annnotation-files bucket generated by PIS
#  - two static files mapping reference sources to EFO ids
#  - the output of the target step to map between gene symbols and ENSG Ids.
cancerbiomarkers {
  inputs {
    biomarkers {
      format = "csv"
      path = "gs://open-targets-data-releases/20.06/input/annotation-files/cancerbiomarkers-2018-05-01.tsv"
      options = [
        {k: "sep", v: "\\t"}
        {k: "header", v: true}
      ]
    }
    disease-mapping {
      format = "json",
      path = "gs://open-targets-data-releases/20.06/input/annotation-files/cancer_biomarker_disease.json"
    }
    source-mapping {
      format = "json",
      path = "gs://open-targets-data-releases/20.06/input/annotation-files/cancer_biomarker_source.json"
    }
    target-mapping {
      format = ${common.output-format}
      path = ${target.outputs.target.path}
    }
  }
  output {
    format = ${common.output-format}
    path = ${common.output}"/cancerbiomarkers-beta"
  }
}

disease {
  efo-ontology {
    format = "json"
    path = ${common.input}"/annotation-files/ontology/efo_json/ontology-efo-v3.31.0.jsonl"
  }
  hpo-ontology {
    format = "json"
    path = ${common.input}"/annotation-files/ontology/efo_json/ontology-hpo.jsonl"
  }
  mondo-ontology {
    format = "json"
    path = ${common.input}"/annotation-files/ontology/efo_json/ontology-mondo.jsonl"
  }
  hpo-phenotype {
    format = "json"
    path = ${common.input}"/annotation-files/ontology/efo_json/hpo-phenotypes-2021-06-18.jsonl"
  }
  outputs = {
    diseases {
      format = ${common.output-format}
      path = ${common.output}"/diseases"
    }
    hpo {
      format = ${common.output-format}
      path = ${common.output}"/hpo"
    }
    disease-hpo {
      format = ${common.output-format}
      path = ${common.output}"/diseaseToPhenotype"
    }
  }
}

drug {
  chembl-molecule {
    format = "json"
    path = ${common.input}"/annotation-files/chembl/chembl_28_molecule-2021-06-18.jsonl"
  }
  chembl-indication {
    format = "json"
    path = ${common.input}"/annotation-files/chembl/chembl_28_drug_indication-2021-06-18.jsonl"
  }
  chembl-mechanism {
    format = "json"
    path = ${common.input}"/annotation-files/chembl/chembl_28_mechanism-2021-06-18.jsonl"
  }
  chembl-target {
    format = "json"
    path = ${common.input}"/annotation-files/chembl/chembl_28_target-2021-06-18.jsonl"
  }
  chembl-warning {
    format = "json"
    path = ${common.input}"/annotation-files/chembl/chembl_28_drug_warning-2021-06-18.jsonl"
  }
  disease-etl = ${disease.outputs.diseases}
  target-etl {
    format = ${common.output-format}
    path = ${common.output}"/targets"
  }
  evidence-etl = ${evidences.outputs.succeeded}
  drugbank-to-chembl {
    format = "csv"
    path = ${common.input}"/annotation-files/chembl/drugbank/db.csv.gz"
    options = [
      {k: "sep", v: "\\t"},
      {k: "header", v: "true"}
    ]
  }
  drug-extensions = [
    {
      extension-type = "synonym"
      input {
        path = "gs://ot-team/jarrod/drugbank/db.json"
        format = "json"
      }
    }
  ]
  outputs = {
    drug {
      format = ${common.output-format}
      path = ${common.output}"/molecule"
    }
    mechanism-of-action {
      format = ${common.output-format}
      path = ${common.output}"/mechanismOfAction"
    }
    indications {
      format = ${common.output-format}
      path = ${common.output}"/indication"
    }
    warnings {
      format = ${common.output-format}
      path = ${common.output}"/drugWarnings"
    }
  }
}

known-drugs {
  inputs = {
    evidences = ${evidences.outputs.succeeded}
    diseases = ${disease.outputs.diseases}
    targets {
      path = ${common.output}"/targets"
      format = ${common.output-format}
    }
    drugs = ${drug.outputs}
  }
  output {
    format = ${common.output-format}
    path = ${common.output}"/knownDrugsAggregated"
  }
}

evidences {
  outputs {
    succeeded {
      format = ${common.output-format}
      path = ${common.output}"/evidence"
      partition-by = ["sourceId"]
    }
    failed {
      format = ${common.output-format}
      path = ${common.output}"/evidenceFailed"
      partition-by = ["sourceId"]
    }
  }

  inputs {
    raw-evidences {
      format = "json"
      path = ${common.input}"/evidence-files//*"
    }
    diseases {
      format = ${common.output-format}
      path = ${common.output}"/diseases"
    }
    targets {
      format = ${common.output-format}
      path = ${common.output}"/targets"
    }
  }

  unique-fields = [
    "targetId",
    "targetFromSourceId",
    "diseaseId",
    "datasourceId"
  ]

  score-expr = "resourceScore"
  datatype-id = "other"

  data-sources = [
    {
      id: "chembl",
      unique-fields: [
        "drugId",
        "urls.url"
      ],
      score-expr: "element_at(map(0, 0.09, 1, 0.1, 2, 0.2, 3, 0.7, 4, 1.0), clinicalPhase)"
    },
    {
      id: "europepmc",
      unique-fields: [
        "literature"
      ],
      score-expr: "array_min(array(resourceScore / 100.0, 1.0))"
    },
    {
      id: "eva",
      datatype-id: "genetic_association",
      unique-fields: [
        "studyId",
        "variantId"
      ],
      score-expr: """
      coalesce(array_max(
        transform(
          clinicalSignificances,
          x -> element_at(
            map(
              'association not found', 0.0,
              'benign', 0.0,
              'not provided', 0.0,
              'likely benign', 0.0,
              'conflicting interpretations of pathogenicity', 0.3,
              'conflicting data from submitters', 0.3,
              'other', 0.3,
              'uncertain significance', 0.3,
              'risk factor', 0.5,
              'affects', 0.5,
              'likely pathogenic', 0.7,
              'confers sensitivity', 0.9,
              'association', 0.9,
              'drug response', 0.9,
              'protective', 0.9,
              'pathogenic', 0.9
              ),
            x)
        )
      ), 0.0) + coalesce(element_at(
        map(
          'practice guideline', 0.1,
          'reviewed by expert panel', 0.07,
          'criteria provided, multiple submitters, no conflicts', 0.05,
          'criteria provided, conflicting interpretations', 0.02,
          'criteria provided, single submitter', 0.02,
          'no assertion for the individual variant', 0.0,
          'no assertion criteria provided', 0.0,
          'no assertion provided', 0.0
        ),
        confidence
      ), 0.0)
      """
    },
    {
      id: "eva_somatic",
      unique-fields: [
        "studyId",
        "variantId"
      ],
      score-expr: """
      coalesce(array_max(
        transform(
          clinicalSignificances,
          x -> element_at(
            map(
              'association not found', 0.0,
              'benign', 0.0,
              'not provided', 0.0,
              'likely benign', 0.0,
              'conflicting interpretations of pathogenicity', 0.3,
              'other', 0.3,
              'uncertain significance', 0.3,
              'risk factor', 0.5,
              'affects', 0.5,
              'likely pathogenic', 0.7,
              'association', 0.9,
              'drug response', 0.9,
              'protective', 0.9,
              'pathogenic', 0.9
              ),
            x)
        )
      ), 0.0) + coalesce(element_at(
        map(
          'practice guideline', 0.1,
          'reviewed by expert panel', 0.07,
          'criteria provided, multiple submitters, no conflicts', 0.05,
          'criteria provided, conflicting interpretations', 0.02,
          'criteria provided, single submitter', 0.02,
          'no assertion for the individual variant', 0.0,
          'no assertion criteria provided', 0.0,
          'no assertion provided', 0.0
        ),
        confidence
      ), 0.0)
      """
    },
    {
      excluded-biotypes: [
        "IG_C_pseudogene",
        "IG_J_pseudogene",
        "IG_pseudogene",
        "IG_V_pseudogene",
        "polymorphic_pseudogene",
        "processed_pseudogene",
        "pseudogene",
        "rRNA",
        "rRNA_pseudogene",
        "snoRNA",
        "snRNA",
        "transcribed_processed_pseudogene",
        "transcribed_unitary_pseudogene",
        "transcribed_unprocessed_pseudogene",
        "TR_J_pseudogene",
        "TR_V_pseudogene",
        "unitary_pseudogene",
        "unprocessed_pseudogene"
      ],
      id: "expression_atlas",
      unique-fields: [
        "contrast",
        "studyId"
      ],
      score-expr: "array_min(array(1.0, pvalue_linear_score_default(resourceScore) * (abs(log2FoldChangeValue) / 10) * (log2FoldChangePercentileRank / 100)))"
    },
    {
      id: "gene2phenotype",
      datatype-id: "genetic_association",
      unique-fields: [
        "diseaseFromSource",
        "allelicRequirements",
        "studyId"
      ],
      score-expr: """
      element_at(
        map(
          'possible', 0.25,
          'probable', 0.5,
          'confirmed', 1.0,
          'both RD and IF', 1.0,
          'child IF', 1.0
        ),
        confidence
      )
      """
    },
    {
      id: "genomics_england",
      datatype-id: "genetic_association",
      unique-fields: [
        "diseaseFromSource",
        "studyId"
      ],
      score-expr: """
      element_at(
        map(
          'amber', 0.5,
          'green', 1.0
        ),
        confidence
      )
      """
    },
    {
      id: "intogen",
      unique-fields: [
        "cohortShortName"
      ],
      score-expr: "pvalue_linear_score(resourceScore, 0.1, 1e-10, 0.25, 1.0)"
    },
    {
      id: "ot_genetics_portal",
      datatype-id: "genetic_association"
      unique-fields: [
        "studyId",
        "variantId"
      ],
      score-expr: "resourceScore"
    },
    {
      id: "orphanet",
      datatype-id: "genetic_association",
      unique-fields: [
        "diseaseFromSourceId"
     ],
     score-expr: "element_at(map('Assessed', 1.0,'Not yet assessed', 0.5), confidence)"
    },
    {
      id: "phenodigm",
      unique-fields: [
        "diseaseFromSource",
        "biologicalModelAllelicComposition",
        "targetInModel",
        "biologicalModelGeneticBackground"
      ],
      score-expr: "resourceScore / 100"
    },
    {
      id: "phewas_catalog",
      datatype-id: "genetic_association",
      unique-fields: [
        "diseaseFromSource",
        "variantRsId"
      ],
      score-expr: "linear_rescale(studyCases, 0.0, 8800.0, 0.0, 1.0) * pvalue_linear_score(resourceScore, 0.5, 1e-25, 0.0, 1.0)"
    },
    {
      id: "crispr",
      score-expr: "linear_rescale(resourceScore, 41.5, 100, 0.415, 1.0)",
      unique-fields: []
    },
    {
      id: "progeny",
      unique-fields: [
        "pathways",
        "diseaseFromSource"
      ],
      score-expr: "pvalue_linear_score(resourceScore, 1e-4, 1e-14, 0.5, 1.0)"
    },
    {
      id: "reactome",
      unique-fields: [
        "variantAminoacidDescriptions",
        "targetModulation",
        "reactionId"
      ],
      score-expr: "1.0"
    },
    {
      id: "slapenrich",
      unique-fields: [
        "pathways",
        "diseaseFromSource"
      ],
      score-expr: "pvalue_linear_score(resourceScore, 1e-4, 1e-14, 0.5, 1.0)"
    },
    {
      id: "sysbio",
      unique-fields: [
        "studyOverview",
        "literature",
        "pathways"
      ],
      score-expr: "resourceScore"
    },
    {
      id: "uniprot_literature"
      datatype-id: "genetic_association"
      unique-fields: [
        "diseaseFromSource",
      ],
      score-expr: """
      element_at(
        map(
          'high', 1.0,
          'medium', 0.5
        ),
        confidence
      )
      """

    },
    {
      id: "uniprot_variants"
      datatype-id: "genetic_association"
      unique-fields: [
        "diseaseFromSource",
        "variantRsId"
      ],
      score-expr: """
      element_at(
        map(
          'high', 1.0,
          'medium', 0.5
        ),
        confidence
      )
      """

    },
    {
      id: "clingen"
      datatype-id: "genetic_association"
      unique-fields: [
        "diseaseFromSource",
        "studyId",
        "allelicRequirements",
      ],
      score-expr: """
      element_at(
        map(
          'No Known Disease Relationship', 0.01,
          'Refuted', 0.01,
          'Disputed', 0.01,
          'Limited', 0.01,
          'Moderate', 0.5,
          'Strong', 1.0,
          'Definitive', 1.0
        ),
        confidence
      )
      """
    },
    {
      id: "orphanet"
      datatype-id: "genetic_association"
      unique-fields: [
        "diseaseFromSourceId"
      ],
      score-expr: """
      element_at(
        map(
          'Assessed', 1.0,
          'Not yet assessed', 0.5
        ),
        confidence
      )
      """
    }
  ]
}

mouse-phenotypes {
  mp-classes {
    format = "json"
    path = ${common.input}"/annotation-files/mp/mp-ontology*.jsonl"
  }
  mp-orthology {
    format = "csv"
    path = ${common.input}"/annotation-files/HMD_HumanPhenotype-*.rpt"
    options = [
      {k: "sep", v: "\\t"},
    ]
  }
  mp-reports {
    format = "csv"
    path = ${common.input}"/annotation-files/MGI_PhenoGenoMP*.rpt"
    options = [
      {k: "sep", v: "\\t"},
    ]
  }
  mp-categories {
    format = "csv"
    path = ${common.input}"/annotation-files/phenotype_categories.csv"
    options = [
      {k: "header", v: true},
    ]
  }
  target = ${target.outputs.target}
  output {
    format = ${common.output-format}
    path = ${common.output}"/mousePhenotypes"
  }
}

associations {
  outputs = {
    direct-by-datatype = {
      format = ${common.output-format}
      path = ${common.output}"/associationByDatatypeDirect"
    }
    direct-by-datasource = {
      format = ${common.output-format}
      path = ${common.output}"/associationByDatasourceDirect"
    }
    direct-by-overall = {
      format = ${common.output-format}
      path = ${common.output}"/associationByOverallDirect"
    }
    indirect-by-datasource = {
      format = ${common.output-format}
      path = ${common.output}"/associationByDatasourceIndirect"
    }
    indirect-by-datatype = {
      format = ${common.output-format}
      path = ${common.output}"/associationByDatatypeIndirect"
    }
    indirect-by-overall = {
      format = ${common.output-format}
      path = ${common.output}"/associationByOverallIndirect"
    }
  }
  inputs = {
    evidences = ${evidences.outputs.succeeded}
    diseases {
      path = ${common.output}"/diseases"
      format = ${common.output-format}
    }
  }

  default-weight = 1.0
  default-propagate = true
  data-sources = [
    {id: "europepmc", weight: 0.2, data-type = "literature", propagate = true},
    {id: "expression_atlas", weight: 0.2, data-type = "rna_expression", propagate = false},
    {id: "phenodigm", weight: 0.2, data-type = "animal_model", propagate = true},
    {id: "progeny", weight: 0.5, data-type = "affected_pathway", propagate = true},
    {id: "slapenrich", weight: 0.5, data-type = "affected_pathway", propagate = true},
    {id: "sysbio", weight: 0.5, data-type = "affected_pathway", propagate = true},
  ]
}

aotf {
  outputs = {
    clickhouse = {
      format = ${common.output-format}
      path = ${common.output}"/AOTFClickhouse"
    }
    elasticsearch = {
      format = "json"
      path = ${common.output}"/AOTFElasticsearch"
    }
  }

  inputs = {
    reactome = ${reactome.output}
    evidences = ${evidences.outputs.succeeded}
    diseases = ${disease.outputs.diseases}
    targets {
      path = ${common.output}"/targets"
      format = ${common.output-format}
    }
  }
}

search {
  inputs = {
    evidences = ${evidences.outputs.succeeded}
    diseases = ${disease.outputs.diseases}
    disease-hpo = ${disease.outputs.disease-hpo}
    hpo = ${disease.outputs.hpo}
    targets {
      path = ${common.output}"/targets"
      format = ${common.output-format}
    }
    drugs = ${drug.outputs}
    associations = ${associations.outputs.indirect-by-overall}
  }
  outputs {
    targets {
      format = ${common.output-format}
      path = ${common.output}"/searchTarget"
    }
    diseases {
      format = ${common.output-format}
      path = ${common.output}"/searchDisease"
    }
    drugs {
      format = ${common.output-format}
      path = ${common.output}"/searchDrug"
    }
  }
}
