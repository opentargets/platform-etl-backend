// Template sentinels:
// release_uri — used in common.path
// data_sources_exclude — used in steps.evidence.data_sources_exclude

spark_uri: null

common: {
  additional_outputs: []
  output_format: "parquet"
  path: "gs://open-targets-pre-data-releases/etl_test"
  output_path: "gs://open-targets-pre-data-releases/etl_test"
}

spark_settings: {
  write_mode: "overwrite"  # in orchestrator we trust

  default_spark_session_config: [
    { k: "spark.driver.maxResultSize",    v: "0"    }
    { k: "spark.debug.maxToStringFields", v: "2000" }
    { k: "spark.sql.broadcastTimeout",    v: "3000" }
  ]
}

# ============================= STEP CONFIGURATION =============================
steps: {
  reactome: {
    input: {
      pathways: {
        format: "csv"
        path: ${common.path}"/input/reactome/ReactomePathways.txt"
        options: [
          { k: "sep",         v: "\\t" }
          { k: "header",      v: false }
          { k: "inferSchema", v: true  }
        ]
      }
      relations: {
        format: "csv"
        path: ${common.path}"/input/reactome/ReactomePathwaysRelation.txt"
        options: [
          { k: "sep",         v: "\\t" }
          { k: "header",      v: false }
          { k: "inferSchema", v: true  }
        ]
      }
    }
    output: {
      reactome: {
        format: ${common.output_format}
        path: ${common.output_path}"/output/reactome"
      }
    }
  }

  pharmacogenomics: {
    input: {
      pgx: {
        format: "json"
        path: ${common.path}"/input/pharmacogenomics/pharmacogenomics.json.gz"
      }
      drug: ${steps.drug.output.drug}
    }
    output: {
      pgx: {
        format: ${common.output_format}
        path: ${common.output_path}"/output/pharmacogenomics"
      }
    }
  }

  expression: {
    input: {
      rna: {
        format: "csv"
        path: ${common.path}"/input/expression/baseline_expression_counts.tsv"
        options: [
          { k: "sep",         v: "\\t" }
          { k: "header",      v: true  }
          { k: "inferSchema", v: true  }
        ]
      }
      binned: {
        format: "csv"
        path: ${common.path}"/input/expression/baseline_expression_binned.tsv"
        options: [
          { k: "sep",         v: "\\t" }
          { k: "header",      v: true  }
          { k: "inferSchema", v: true  }
        ]
      }
      zscore: {
        format: "csv"
        path: ${common.path}"/input/expression/baseline_expression_zscore_binned.tsv"
        options: [
          { k: "sep",         v: "\\t" }
          { k: "header",      v: true  }
          { k: "inferSchema", v: true  }
        ]
      }
      exprhierarchy: {
        format: "csv"
        path: ${common.path}"/input/expression/expression_hierarchy_curation.tsv"
        options: [
          { k: "sep",         v: "\\t" }
          { k: "header",      v: false }
          { k: "inferSchema", v: true  }
        ]
      }
      efomap: {
        format: "parquet"
        path: ${common.path}"/intermediate/expression/tissue-translation-map.parquet"
      }
      tissues: {
        format: "csv"
        path: ${common.path}"/intermediate/expression/normal_tissue.tsv.gz"
        options: [
          { k: "sep",         v: "\\t" }
          { k: "header",      v: true  }
          { k: "inferSchema", v: true  }
        ]
      }
    }
    output: {
      expression: {
        format: ${common.output_format}
        path: ${common.output_path}"/output/expression"
      }
    }
  }

  interaction: {
    scorethreshold: 0
    string_version: "12"
    input: {
      targets: ${steps.target.output.target}
      rnacentral: {
        format: "csv"
        path: ${common.path}"/input/interaction/rna_central_ensembl.tsv"
        options: [
          { k: "sep",    v: "\\t" }
          { k: "header", v: false }
        ]
      }
      humanmapping: {
        format: "csv"
        path: ${common.path}"/input/interaction/HUMAN_9606_idmapping.dat.gz"
        options: [
          { k: "sep",    v: "\\t" }
          { k: "header", v: false }
        ]
      }
      ensproteins: {
        format: "csv"
        path: ${common.path}"/input/interaction/Homo_sapiens.GRCh38.chr.gtf.gz"
        options: [
          { k: "sep",     v: "\\t" }
          { k: "header",  v: false }
          { k: "comment", v: "#"   }
        ]
      }
      intact: {
        format: "json"
        path: ${common.path}"/input/interaction/intact-interactors.json"
      }
      strings: {
        format: "csv"
        path: ${common.path}"/input/interaction/string-interactions.txt.gz"
        options: [
          { k: "sep",    v: " "  }
          { k: "header", v: true }
        ]
      }
    }
    output: {
      interactions: {
        format: ${common.output_format}
        path: ${common.path}"/output/interaction"
      }
      interactions_evidence: {
        format: ${common.output_format}
        path: ${common.path}"/output/interaction_evidence"
      }
      interactions_unmatched: {
        format: ${common.output_format}
        path: ${common.path}"/excluded/interaction"
      }
    }
  }

  target: {
    input: {
      chembl: {
        format: "json"
        path: ${common.path}"/input/target/chembl/chembl_target.jsonl"
      }
      chemical_probes: {
        format: "json"
        path: ${common.path}"/input/target/chemicalprobes/chemicalprobes.json.gz"
      }
      diseases: {
        format: "parquet"
        path: ${common.path}"/output/disease"
      }
      ensembl: {
        format: ${common.output_format}
        path: ${common.path}"/intermediate/target/ensembl/homo_sapiens.parquet"
      }
      gene_code: {
        format: "csv"
        path: ${common.path}"/input/target/gencode/gencode.gff3.gz"
        options: [
          { k: "sep",     v: "\\t" }
          { k: "comment", v: "#"   }
        ]
      }
      genetic_constraints: {
        format: "csv"
        path: ${common.path}"/intermediate/target/gnomad/gnomad_lof_by_gene.txt.gz"
        options: [
          { k: "sep",       v: "\\t" }
          { k: "header",    v: true  }
          { k: "nullValue", v: "NA"  }
        ]
      }
      gene_ontology_human: {
        format: "csv"
        path: ${common.path}"/input/target/go/goa_human.gaf.gz"
        options: [
          { k: "sep",     v: "\\t" }
          { k: "comment", v: "!"   }
        ]
      }
      gene_ontology_rna: {
        format: "csv"
        path: ${common.path}"/input/target/go/goa_human_rna.gaf.gz"
        options: [
          { k: "sep", v: "\\t"   }
          { k: "comment", v: "!" }
        ]
      }
      gene_ontology_rna_lookup: {
        format: "csv"
        path: ${common.path}"/input/target/go/ensembl.tsv"
        options: [
          { k: "sep", v: "\\t" }
        ]
      }
      gene_ontology_eco_lookup: {
        format: "csv"
        path: ${common.path}"/input/target/go/goa_human_eco.gpa.gz"
        options: [
          { k: "sep", v: "\\t"   }
          { k: "comment", v: "!" }
        ]
      }
      hallmarks: {
        format: "csv"
        path: ${common.path}"/input/target/hallmarks/cosmic-hallmarks.tsv.gz"
        options: [
          { k: "sep",    v: "\\t" }
          { k: "header", v: true  }
        ]
      }
      hgnc: {
        format: "json"
        path: ${common.path}"/input/target/genenames/hgnc_complete_set.json"
      },
      homology_dictionary: {
        format: "csv"
        path: ${common.path}"/input/target/homologue/species_EnsemblVertebrates.txt"
        options: [
          { k: "sep",    v: "\\t" }
          { k: "header", v: true  }
        ]
      }
      homology_coding_proteins: {
        format: "csv"
        path: ${common.path}"/input/target/homologue/homologies/*.tsv.gz"
        options: [
          { k: "sep",    v: "\\t" }
          { k: "header", v: true  }
        ]
      }
      homology_gene_dictionary: {
        format: "parquet"
        path: ${common.path}"/intermediate/target/homologue/gene_dictionary/*.parquet"
        options: [
          { k: "sep", v: "\\t" }
        ]
      }
      hpa: {
        format: "csv"
        path: ${common.path}"/intermediate/target/hpa/subcellular_location.tsv.gz"
        options: [
          { k: "sep",    v: "\\t" }
          { k: "header", v: true  }
        ]
      }
      hpa_sl: {
        format: "parquet"
        path: ${common.path}"/intermediate/target/hpa/subcellular_locations_ssl.parquet"
      }
      ncbi: {
        format: "csv"
        path: ${common.path}"/input/target/ncbi/Homo_sapiens.gene_info.gz"
        options: [
          { k: "sep",    v: "\\t" }
          { k: "header", v: true  }
        ]
      }
      project_scores_ids: {
        format: "parquet"
        path: ${common.path}"/intermediate/target/project-scores/gene_identifiers_latest.parquet"
      }
      project_scores_essentiality_matrix: {
        format: "parquet"
        path: ${common.path}"/intermediate/target/project-scores/04_binaryDepScores.parquet"
      }
      reactome_etl: {
        format: "parquet"
        path: ${common.path}"/output/reactome/part*"
      }
      reactome_pathways: {
        format: "csv"
        path: ${common.path}"/input/target/reactome/Ensembl2Reactome.txt"
        options: [
          { k: "sep", v: "\\t" }
        ]
      }
      safety_evidence: {
        format: "json"
        path: ${common.path}"/input/target/safety/safetyLiabilities.json.gz"
      }
      tep: {
        format: "json"
        path: ${common.path}"/input/target/tep/tep.json.gz"
      },
      tractability: {
        format: "csv"
        path: ${common.path}"/input/target/tractability/tractability.tsv"
        options: [
          { k: "sep",    v: "\\t" }
          { k: "header", v: true  }
        ]
      }
      uniprot: {
        format: "txt"
        path: ${common.path}"/input/target/uniprot/uniprot.txt.gz"
      }
      uniprot_ssl: {
        format: "csv"
        path: ${common.path}"/input/target/uniprot/uniprot-ssl.tsv.gz"
        options: [
          { k: "sep",    v: "\\t" }
          { k: "header", v: true  }
        ]
      }
      gene_essentiality: {
        format: "json"
        path: ${common.path}"/input/target/gene-essentiality/essentiality.json.gz"
      }
    }
    output: {
      target: {
        format: ${common.output_format}
        path: ${common.output_path}"/output/target"
      }
      gene_essentiality: {
        format: ${common.output_format}
        path: ${common.output_path}"/output/target_essentiality"
      }
    }
    hgnc_ortholog_species: [
      "9606-human"
      "9598-chimpanzee"
      "9544-macaque"
      "10090-mouse"
      "10116-rat"
      "9986-rabbit"
      "10141-guineapig"
      "9615-dog"
      "9823-pig"
      "8364-frog"
      "7955-zebrafish"
      "7227-fly"
      "6239-worm"
    ]
  }

  mouse_phenotype: {
    input: {
      mouse_phenotypes: {
        format: "json"
        path: ${common.path}"/input/mouse_phenotype/mouse_phenotypes.json.gz"
      }
      target: ${steps.target.output.target}
    }
    output: {
      succeeded: {
        format: ${common.output_format}
        path: ${common.output_path}"/output/mouse_phenotype"
      }
      failed: {
        format: ${common.output_format}
        path: ${common.output_path}"/excluded/mouse_phenotype"
      }
    }
  }

  drug: {
    input: {
      chemical_probes: {
        format: "json"
        path: ${common.path}"/input/drug/chemicalprobes.json.gz"
      }
      chembl_indication: {
        format: "json"
        path: ${common.path}"/input/drug/chembl_drug_indication.jsonl"
      }
      chembl_molecule: {
        format: "json"
        path: ${common.path}"/input/drug/chembl_molecule.jsonl"
      }
      chembl_mechanism: {
        format: "json"
        path: ${common.path}"/input/drug/chembl_mechanism.jsonl"
      }
      chembl_target: {
        format: "json"
        path: ${common.path}"/input/drug/chembl_target.jsonl"
      }
      chembl_warning: {
        format: "json"
        path: ${common.path}"/input/drug/chembl_drug_warning.jsonl"
      }
      disease_etl: {
        format: "parquet"
        path: ${common.path}"/output/disease"
      }
      target_etl: ${steps.target.output.target}
      drugbank_to_chembl: {
        format: "csv"
        path: ${common.path}/input/drug/drugbank.csv.gz
        options: [
          { k: "sep",    v: "\\t" }
          { k: "header", v: true  }
        ]
      }
    }
    drug_extensions: []
    output: {
      drug: {
        format: ${common.output_format}
        path: ${common.output_path}"/output/drug_molecule"
      }
      mechanism_of_action: {
        format: ${common.output_format}
        path: ${common.output_path}"/output/drug_mechanism_of_action"
      }
      indications: {
        format: ${common.output_format}
        path: ${common.output_path}"/output/drug_indication"
      }
      warnings: {
        format: ${common.output_format}
        path: ${common.output_path}"/output/drug_warning"
      }
    }
  }

  known_drug: {
    input: {
      evidences: ${steps.evidence.output.succeeded}
      diseases: {
        format: "parquet"
        path: ${common.path}"/output/disease"
      }
      targets: ${steps.target.output.target}
      drug: ${steps.drug.output.drug}
      mechanism: ${steps.drug.output.mechanism_of_action}
    }
    output: {
      known_drugs: {
        format: ${common.output_format}
        path: ${common.output_path}"/output/known_drug"
      }
    }
  }

  evidence: {
    output: {
      succeeded: {
        format: ${common.output_format}
        path: ${common.output_path}"/output/evidence"
        partition_by: [ "sourceId" ]
      }
      failed: {
        format: ${common.output_format}
        path: ${common.output_path}"/excluded/evidence"
        partition_by: [ "sourceId" ]
      }
    }
    input: {
      raw_input_evidences: {
        format: "json"
        path: ${common.path}"/input/evidence/*"
      }
      raw_intermediate_evidences: {
        format: "json"
        path: ${common.path}"/intermediate/evidence/*"
      }
      diseases: {
        format: "parquet"
        path: ${common.path}"/output/disease"
      }
      targets: ${steps.target.output.target}
      mechanism_of_action: ${steps.drug.output.mechanism_of_action}
    }
    direction_of_effect: {
      var_filter_lof: [
        # High impact variants https://www.ensembl.org/info/genome/variation/prediction/predicted_data.html
        "SO_0001589"  # frameshit_variant
        "SO_0001587"  # stop_gained
        "SO_0001574"  # splice_acceptor_variant
        "SO_0001575"  # splice_donor_variant
        "SO_0002012"  # start_lost
        "SO_0001578"  # stop_lost
        "SO_0001893"  # transcript_ablation
      ]
      gof: [ "SO_0002053" ]
      lof: [ "SO_0002054" ]
      oncotsg_list: [
        "TSG"
        "oncogene"
        "Oncogene"
        "oncogene"
        "oncogene,TSG"
        "TSG,oncogene"
        "fusion,oncogene"
        "oncogene,fusion"
      ]
      inhibitors: [
        "RNAI INHIBITOR"
        "NEGATIVE MODULATOR"
        "NEGATIVE ALLOSTERIC MODULATOR"
        "ANTAGONIST"
        "ANTISENSE INHIBITOR"
        "BLOCKER"
        "INHIBITOR"
        "DEGRADER"
        "INVERSE AGONIST"
        "ALLOSTERIC ANTAGONIST"
        "DISRUPTING AGENT"
      ]
      activators: [
        "PARTIAL AGONIST"
        "ACTIVATOR"
        "POSITIVE ALLOSTERIC MODULATOR"
        "POSITIVE MODULATOR"
        "AGONIST"
        "SEQUESTERING AGENT"
        "STABILISER"
      ]
      sources: [
        "gene_burden"
        "eva"
        "eva_somatic"
        "gene2phenotype"
        "orphanet"
        "cancer_gene_census"
        "intogen"
        "impc"
        "chembl"
      ]
    }
    unique_fields: [
      "targetId"
      "targetFromSourceId"
      "diseaseId"
      "datasourceId"
    ]
    score_expr: "resourceScore"
    datatype_id: "other"
    # by default, exclude ppp datasources
    data_sources_exclude: ["ot_crispr", "encore", "ot_crispr_validation"]
    data_sources: [
      {
        id: "chembl"
        unique_fields: [
          "drugId"
          "urls.url"
        ]
        score_expr: """
          element_at(
            map(
              cast(0.5 as double),
              0.05,
              cast(1.0 as double),
              0.1,
              cast(2.0 as double),
              0.2,
              cast(3.0 as double),
              0.7,
              cast(4.0 as double),
              1.0
            ),
            clinicalPhase
          ) *
          case
          when studyStopReasonCategories is null then
            double(1.0)
          else
            array_min(
              transform(
                studyStopReasonCategories,
                x -> element_at(
                  map(
                    'Another study', double(1.0),
                    'Business or administrative', double(1.0),
                    'COVID-19', double(1.0),
                    'Ethical reason', double(1.0),
                    'Insufficient data', double(1.0),
                    'Insufficient enrollment', double(1.0),
                    'Interim analysis', double(1.0),
                    'Invalid reason', double(1.0),
                    'Logistics or resources', double(1.0),
                    'Met endpoint', double(1.0),
                    'Negative', double(0.5),
                    'No context', double(1.0),
                    'Regulatory', double(1.0),
                    'Safety or side effects', double(0.5),
                    'Study design', double(1.0),
                    'Study staff moved', double(1.0),
                    'Success', double(1.0),
                    'Uncategorised', double(1.0)
                  ),
                  x
                )
              )
            )
          end
        """
      }
      {
        id: "crispr_screen"
        unique_fields: [
          "studyId"
          "targetFromSourceId"
          "diseaseFromSourceMappedId"
        ]
        score_expr: "pvalue_linear_score(resourceScore, 0.5, 0.005, 0.0, 1.0)"
      }
      {
        id: "europepmc"
        unique_fields: [ "literature" ]
        score_expr: "array_min(array(resourceScore / 100.0, 1.0))"
      }
      {
        id: "eva"
        datatype_id: "genetic_association"
        unique_fields: [
          "studyId"
          "variantId"
        ]
        score_expr: """
          coalesce(
            array_max(
              transform(
                clinicalSignificances,
                x -> element_at(
                  map(
                    'association not found', 0.0,
                    'benign', 0.0,
                    'not provided', 0.0,
                    'likely benign', 0.0,
                    'likely risk allele', 0.3,
                    'low penetrance', 0.3,
                    'conflicting interpretations of pathogenicity', 0.3,
                    'conflicting data from submitters', 0.3,
                    'other', 0.3,
                    'uncertain significance', 0.3,
                    'uncertain risk allele', 0.3,
                    'established risk allele', 0.5,
                    'risk factor', 0.5,
                    'affects', 0.5,
                    'likely pathogenic', 0.7,
                    'confers sensitivity', 0.9,
                    'association', 0.9,
                    'drug response', 0.9,
                    'protective', 0.9,
                    'pathogenic', 0.9
                  ),
                  x
                )
              )
            ),
            0.0
          ) + coalesce(
            element_at(
              map(
                'practice guideline', 0.1,
                'reviewed by expert panel', 0.07,
                'criteria provided, multiple submitters, no conflicts', 0.05,
                'criteria provided, conflicting interpretations', 0.02,
                'criteria provided, single submitter', 0.02,
                'no assertion for the individual variant', 0.0,
                'no assertion criteria provided', 0.0,
                'no assertion provided', 0.0
              ),
              confidence
            ),
            0.0
          )
        """
      }
      {
        id: "eva_somatic"
        unique_fields: [
          "studyId"
          "variantId"
        ]
        score_expr: """
          coalesce(
            array_max(
              transform(
                clinicalSignificances,
                x -> element_at(
                  map(
                    'association not found', 0.0,
                    'benign', 0.0,
                    'not provided', 0.0,
                    'likely benign', 0.0,
                    'likely risk allele', 0.3,
                    'conflicting interpretations of pathogenicity', 0.3,
                    'conflicting data from submitters', 0.3,
                    'other', 0.3,
                    'uncertain significance', 0.3,
                    'low penetrance', 0.3,
                    'uncertain risk allele', 0.3,
                    'established risk allele', 0.5,
                    'risk factor', 0.5,
                    'affects', 0.5,
                    'likely pathogenic', 0.7,
                    'confers sensitivity', 0.9,
                    'association', 0.9,
                    'drug response', 0.9,
                    'protective', 0.9,
                    'pathogenic', 0.9
                  ),
                  x
                )
              )
            ),
            0.0
          ) + coalesce(
            element_at(
              map(
                'practice guideline', 0.1,
                'reviewed by expert panel', 0.07,
                'criteria provided, multiple submitters, no conflicts', 0.05,
                'criteria provided, conflicting interpretations', 0.02,
                'criteria provided, single submitter', 0.02,
                'no assertion for the individual variant', 0.0,
                'no assertion criteria provided', 0.0,
                'no assertion provided', 0.0
              ),
              confidence
            ),
            0.0
          )
        """
      }
      {
        excluded_biotypes: [
          "IG_C_pseudogene"
          "IG_J_pseudogene"
          "IG_pseudogene"
          "IG_V_pseudogene"
          "polymorphic_pseudogene"
          "processed_pseudogene"
          "pseudogene"
          "rRNA"
          "rRNA_pseudogene"
          "snoRNA"
          "snRNA"
          "transcribed_processed_pseudogene"
          "transcribed_unitary_pseudogene"
          "transcribed_unprocessed_pseudogene"
          "TR_J_pseudogene"
          "TR_V_pseudogene"
          "unitary_pseudogene"
          "unprocessed_pseudogene"
        ]
        id: "expression_atlas"
        unique_fields: [
          "contrast"
          "studyId"
        ]
        score_expr: "array_min(array(1.0, pvalue_linear_score_default(resourceScore) * (abs(log2FoldChangeValue) / 10) * (log2FoldChangePercentileRank / 100)))"
      }
      {
        id: "gene_burden"
        datatype_id: "genetic_association"
        unique_fields: [
          "ancestryId"
          "diseaseFromSource"
          "statisticalMethod"
          "projectId"
        ]
        score_expr: "pvalue_linear_score(resourceScore, 1e-7, 1e-17, 0.25, 1.0)"
      }
      {
        id: "gene2phenotype"
        datatype_id: "genetic_association"
        unique_fields: [
          "diseaseFromSource"
          "allelicRequirements"
          "studyId"
        ]
        score_expr: """
          element_at(
            map(
              'definitive', 1.0,
              'both RD and IF', 1.0,
              'strong', 1.0,
              'moderate', 0.5,
              'limited', 0.01
            ),
            confidence
          )
        """
      }
      {
        id: "genomics_england"
        datatype_id: "genetic_association"
        unique_fields: [
          "diseaseFromSource"
          "studyId"
        ]
        score_expr: """
          element_at(
            map(
              'amber', 0.5,
              'green', 1.0
            ),
            confidence
          )
        """
      }
      {
        id: "intogen"
        unique_fields: [ "cohortShortName" ]
        score_expr: "pvalue_linear_score(resourceScore, 0.1, 1e-10, 0.25, 1.0)"
      }
      {
        id: "gwas_credible_sets"
        datatype_id: "genetic_association"
        unique_fields: [ "studyLocusId" ]
        score_expr: "resourceScore"
      }
      {
        id: "ot_crispr"
        datatype_id: "ot_partner"
        unique_fields: [
          "studyId"
          "diseaseFromSourceMappedId"
          "targetFromSourceId"
          "resourceScore"
          "statisticalTestTail"
        ]
        score_expr: "1.0"
      }
      {
        id: "encore"
        datatype_id: "ot_partner"
        unique_fields: [
          "targetFromSourceId"
          "interactingTargetFromSourceId"
          "diseaseFromSourceMappedId"
          "cellType"
        ]
        score_expr: "pvalue_linear_score(geneticInteractionPValue, 1.0, 0.01, 0.0, 1.0)"
      }
      {
        id: "ot_crispr_validation"
        unique_fields: [
          "targetFromSourceId"
          "diseaseFromSourceMappedId"
          "resourceScore"
          "diseaseCellLines"
          "primaryProjectId"
        ]
        score_expr: "resourceScore"
      }
      {
        id: "orphanet"
        datatype_id: "genetic_association"
        unique_fields: [ "diseaseFromSourceId" ]
        score_expr: "element_at(map('Assessed', 1.0, 'Not yet assessed', 0.5), confidence)"
      }
      {
        id: "impc"
        unique_fields: [
          "diseaseFromSource"
          "biologicalModelAllelicComposition"
          "targetInModel"
          "biologicalModelGeneticBackground"
        ]
        score_expr: "resourceScore / 100"
      }
      {
        id: "crispr"
        score_expr: "linear_rescale(resourceScore, 41.5, 100, 0.415, 1.0)"
        unique_fields: []
      }
      {
        id: "progeny"
        unique_fields: [
          "pathways"
          "diseaseFromSource"
        ]
        score_expr: "pvalue_linear_score(resourceScore, 1e-4, 1e-14, 0.5, 1.0)"
      }
      {
        id: "reactome"
        unique_fields: [
          "variantAminoacidDescriptions"
          "targetModulation"
          "reactionId"
        ]
        score_expr: "1.0"
      }
      {
        id: "slapenrich"
        unique_fields: [
          "pathways"
          "diseaseFromSource"
        ]
        score_expr: "pvalue_linear_score(resourceScore, 1e-4, 1e-14, 0.5, 1.0)"
      }
      {
        id: "sysbio"
        unique_fields: [
          "studyOverview"
          "literature"
          "pathways"
        ]
        score_expr: "resourceScore"
      }
      {
        id: "uniprot_literature"
        datatype_id: "genetic_association"
        unique_fields: [ "diseaseFromSource" ]
        score_expr: """
          element_at(
            map(
              'high', 1.0,
              'medium', 0.5
            ),
            confidence
          )
        """
      }
      {
        id: "uniprot_variants"
        datatype_id: "genetic_association"
        unique_fields: [
          "diseaseFromSource"
          "variantRsId"
          "variantId"
        ]
        score_expr: """
          element_at(
            map(
              'high', 1.0,
              'medium', 0.5
            ),
            confidence
          )
        """
      }
      {
        id: "clingen"
        datatype_id: "genetic_association"
        unique_fields: [
          "diseaseFromSource"
          "studyId"
          "allelicRequirements"
        ]
        score_expr: """
          element_at(
            map(
              'No Known Disease Relationship', 0.01,
              'Refuted', 0.01,
              'Disputed', 0.01,
              'Limited', 0.01,
              'Moderate', 0.5,
              'Strong', 1.0,
              'Definitive', 1.0
            ),
            confidence
          )
        """
      }
      {
        id: "cancer_biomarkers"
        unique_fields: [
          "biomarkerName"
          "confidence"
          "diseaseFromSource"
          "drugFromSource"
          "drugResponse"
        ]
        score_expr: "1.0"
      }
    ]
  }

  search_facet: {
    input: {
      diseases: {
        format: "parquet"
        path: ${common.path}"/output/disease"
      }
      targets: ${steps.target.output.target}
      go: ${steps.go.output.go}
    }
    output: {
      targets: {
        format: ${common.output_format}
        path: ${common.output_path}"/view/search_facet_target"
      }
      diseases: {
        format: ${common.output_format}
        path: ${common.output_path}"/view/search_facet_disease"
      }
    }
    categories: {
      disease_name: "Disease"
      therapeutic_area: "Therapeutic Area"
      sm: "Tractability Small Molecule"
      ab: "Tractability Antibody"
      pr: "Tractability PROTAC"
      oc: "Tractability Other Modalities"
      target_id: "Target ID"
      approved_symbol: "Approved Symbol"
      approved_name: "Approved Name"
      subcellular_location: "Subcellular Location"
      target_class: "ChEMBL Target Class"
      pathways: "Reactome"
      go_f: "GO:MF"
      go_p: "GO:BP"
      go_c: "GO:CC"
    }
  }

  go: {
    input: {
      go: {
        format: "csv"
        path: ${common.path}"/input/go/go.obo"
      }
    }
    output: {
      go: {
        format: ${common.output_format}
        path: ${common.output_path}"/output/go"
      }
    }
  }

  association: {
    input: {
      evidences: ${steps.evidence.output.succeeded}
      diseases: {
        format: "parquet"
        path: ${common.path}"/output/disease"
      }
    }
    output: {
      direct_by_datatype: {
        format: ${common.output_format}
        path: ${common.output_path}"/output/association_by_datatype_direct"
      }
      direct_by_datasource: {
        format: ${common.output_format}
        path: ${common.output_path}"/output/association_by_datasource_direct"
      }
      direct_by_overall: {
        format: ${common.output_format}
        path: ${common.output_path}"/output/association_overall_direct"
      }
      indirect_by_datasource: {
        format: ${common.output_format}
        path: ${common.output_path}"/output/association_by_datasource_indirect"
      }
      indirect_by_datatype: {
        format: ${common.output_format}
        path: ${common.output_path}"/output/association_by_datatype_indirect"
      }
      indirect_by_overall: {
        format: ${common.output_format}
        path: ${common.output_path}"/output/association_by_overall_indirect"
      }
    }
    default_weight: 1.0
    default_propagate: true
    data_sources: [
      { id: "europepmc",            data_type: "literature",        weight: 0.2, propagate: true  }
      { id: "expression_atlas",     data_type: "rna_expression",    weight: 0.2, propagate: false }
      { id: "impc",                 data_type: "animal_model",      weight: 0.2, propagate: true  }
      { id: "progeny",              data_type: "affected_pathway",  weight: 0.5, propagate: true  }
      { id: "slapenrich",           data_type: "affected_pathway",  weight: 0.5, propagate: true  }
      { id: "sysbio",               data_type: "affected_pathway",  weight: 0.5, propagate: true  }
      { id: "cancer_biomarkers",    data_type: "affected_pathway",  weight: 0.5, propagate: true  }
      { id: "ot_crispr",            data_type: "ot_partner",        weight: 0.5, propagate: true  }
      { id: "ot_crispr_validation", data_type: "ot_validation_lab", weight: 0.5, propagate: true  }
      { id: "encore",               data_type: "ot_partner",        weight: 0.5, propagate: true  }
    ]
  }

  association_otf: {
    input: {
      diseases: {
        format: "parquet"
        path: ${common.path}"/output/disease"
      }
      evidences: ${steps.evidence.output.succeeded}
      targets: ${steps.target.output.target}
    }
    output: {
      clickhouse: {
        format: ${common.output_format}
        path: ${common.output_path}"/view/association_otf"
      }
    }
  }

  search: {
    input: {
      association: ${steps.association.output.indirect_by_overall}
      drug: ${steps.drug.output.drug}
      evidence: ${steps.evidence.output.succeeded}
      indication: ${steps.drug.output.indications}
      mechanism: ${steps.drug.output.mechanism_of_action}
      target: ${steps.target.output.target}
      credible_sets: {
        format: "parquet"
        path: ${common.path}"/output/credible_set"
      }
      disease: {
        format: "parquet"
        path: ${common.path}"/output/disease"
      }
      disease_hpo: {
        format: "parquet"
        path: ${common.path}"/output/disease_phenotype"
      }
      hpo: {
        format: "parquet"
        path: ${common.path}"/output/disease_hpo"
      }
      studies: {
        format: "parquet"
        path: ${common.path}"/output/study"
      }
      variants: {
        format: "parquet"
        path: ${common.path}"/output/variant"
      }
    }
    output: {
      diseases: {
        format: ${common.output_format}
        path: ${common.output_path}"/view/search_disease"
      }
      drugs: {
        format: ${common.output_format}
        path: ${common.output_path}"/view/search_drug"
      }
      studies: {
        format: ${common.output_format}
        path: ${common.output_path}"/view/search_study"
      }
      targets: {
        format: ${common.output_format}
        path: ${common.output_path}"/view/search_target"
      }
      variants: {
        format: ${common.output_format}
        path: ${common.output_path}"/view/search_variant"
      }
    }
  }

  openfda: {
    input: {
      chembl_drugs: ${steps.drug.output.drug}
      blacklisted_events: {
        format: "csv"
        path: ${common.path}"/input/openfda/blacklisted_events.txt"
        options: [
          { k: "sep",                      v: "\\t" }
          { k: "ignoreLeadingWhiteSpace",  v: true  }
          { k: "ignoreTrailingWhiteSpace", v: true  }
        ]
      }
      fda_data: {
        format: ${common.output_format}
        path: ${common.path}"/intermediate/openfda/*"
      }
      meddra_preferred_terms: {
        format: "csv"
        path: "gs://open-targets-data-releases-private/meddra/meddra23.1/MedAscii/pt.asc"
      }
      meddra_low_level_terms: {
        format: "csv"
        path: "gs://open-targets-data-releases-private/meddra/meddra23.1/MedAscii/llt.asc"
      }
    }
    output: {
      fda_unfiltered: {
        format: ${common.output_format}
        path: ${common.output_path}"/intermediate/openfda_adverse_drug_reactions"
      }
      fda_results: {
        format: ${common.output_format}
        path: ${common.output_path}"/output/openfda_significant_adverse_drug_reactions"
      }
      fda_targets_unfiltered: {
        format: ${common.output_format}
        path: ${common.output_path}"/intermediate/openfda_adverse_target_reactions"
      }
      fda_targets_results: {
        format: ${common.output_format}
        path: ${common.output_path}"/output/openfda_significant_adverse_target_reactions"
      }
      sampling: {
        format: ${common.output_format}
        path: ${common.output_path}"/intermediate/openfda_sample"
      }
      sampling_targets: {
        format: ${common.output_format}
        path: ${common.output_path}"/intermediate/openfda_sample_targets"
      }
    }
    meddra_preferred_terms_cols: [
      "pt_code"
      "pt_name"
    ]
    meddra_low_level_terms_cols: [
      "llt_code"
      "llt_name"
    ]
    montecarlo: {
      permutations: 100
      percentile: 0.95
    }
    sampling: {
      size: 0.1
      enabled: false
    }
  }

  search_ebi: {
    input: {
      disease: {
        format: "parquet"
        path: ${common.path}"/output/disease"
      }
      target: ${steps.target.output.target}
      evidence: {
        format: ${common.output_format}
        path: ${steps.evidence.output.succeeded.path}"/sourceId=gwas_credible_sets/"
      }
      association: ${steps.association.output.direct_by_overall}
    }
    output: {
      associations: {
        format: ${common.output_format}
        path: ${common.output_path}"/view/search_ebi_associations"
      }
      evidence: {
        format: ${common.output_format}
        path: ${common.output_path}"/view/search_ebi_evidence"
      }
    }
  }

  otar: {
    input: {
      diseases: {
        format: "parquet"
        path: ${common.path}"/output/disease"
      }
      otar_meta: {
        format: "csv"
        path: ${common.path}"/input/otar/otar_meta.csv"
        options: [
          { k: "sep",         v: ","  }
          { k: "header",      v: true }
          { k: "inferSchema", v: true }
        ]
      }
      otar_project_to_efo: {
        format: "csv"
        path: ${common.path}"/input/otar/otar_project_to_efo.csv"
        options: [
          { k: "sep",         v: ","  }
          { k: "header",      v: true }
          { k: "inferSchema", v: true }
        ]
      }
    }
    output: {
      otar: {
        format: ${common.output_format}
        path: ${common.output_path}"/output/otar"
      }
    }
  }

  literature: {
    input: {
      processing_epmcids: {
        format: "csv"
        path: ${common.path}"/input/literature/PMID_PMCID_DOI.csv.gz"
        options: [
          { k: "header",      v: true }
          { k: "inferSchema", v: true }
        ]
      }
      processing_diseases: {
        format: "parquet"
        path: ${common.path}"/output/disease"
      }
      processing_targets: ${steps.target.output.target}
      processing_drugs: ${steps.drug.output.drug}
      processing_abstracts: {
        format: "json"
        path: "gs://otar025-epmc/ml02/abstract/**/*.jsonl"
      }
      processing_full_texts: {
        format: "json"
        path: "gs://otar025-epmc/ml02/fulltext/**/*.jsonl"
      }
      epmc_cooccurences: ${steps.literature.output.processing_cooccurrences}
      embedding_matches: ${steps.literature.output.processing_matches}
      vectors_input: ${steps.literature.output.embedding_model}
    }
    output: {
      processing_cooccurrences: {
        format: ${common.output_format}
        path: ${common.output_path}"/intermediate/literature_cooccurrence"
      }
      processing_matches: {
        format: ${common.output_format}
        path: ${common.output_path}"/intermediate/literature_match"
      }
      processing_literature_index: {
        format: ${common.output_format}
        path: ${common.output_path}"/output/literature"
      }
      processing_literature_sentences: {
        format: ${common.output_format}
        path: ${common.output_path}"/intermediate/literature_sentence"
      }
      processing_failed_cooccurrences: {
        format: ${common.output_format}
        path: ${common.output_path}"/excluded/literature_cooccurrence"
      }
      processing_failed_matches: {
        format: ${common.output_format}
        path: ${common.output_path}"/excluded/literature_match"
      }
      epmc_cooccurrences: {
        format: ${common.output_format}
        path: ${common.output_path}"/intermediate/literature_epmc_cooccurrence"
      }
      epmc_output: {
        format: "json"
        path: ${common.output_path}"/intermediate/evidence/literature_epmc"
        options: [
          { k: "compression", v: "gzip" }
        ]
      }
      embedding_model: {
        format: ${common.output_format}
        path: ${common.output_path}"/etc/model/w2v_model"
      }
      embedding_training_set: {
        format: ${common.output_format}
        path: ${common.output_path}"/intermediate/literature_training_set"
      }
      vectors_output: {
        format: ${common.output_format}
        path: ${common.output_path}"/output/literature_vector"
      }
    }
    common: {
      publication_section_ranks: [
        { section: "title",    rank: 1, weight: 1.0 }
        { section: "abstract", rank: 1, weight: 0.8 }
        { section: "concl",    rank: 1, weight: 0.7 }
        { section: "results",  rank: 2, weight: 0.6 }
        { section: "discuss",  rank: 2, weight: 0.5 }
        { section: "methods",  rank: 3, weight: 0.3 }
        { section: "other",    rank: 4, weight: 0.1 }
      ]

      spark_session_config: [
        { k: "spark.sql.mapKeyDedupPolicy", v: "LAST_WIN" }
      ]
    }
    processing: {
      # When preparing the literature outputs we can optionally save all the
      # entities which did not match. These are not used for anything downstream
      # and are only useful for debugging and quality control. Setting this value
      # to true will result in additional outputs 'failedMatches' and 'failedCoocs'
      # being written. Note, this slows down the process significantly.
      write_failures: false
    }
    epmc: {
      uris: {
        ensembl: "https://www.ensembl.org/Homo_sapiens/Gene/Summary?db=core;g="
        chembl: "https://www.ebi.ac.uk/chembl/compound_report_card/"
        ontologies: "https://www.ebi.ac.uk/ols/ontologies/efo/terms?short_form="
      }
      excluded_target_terms: [
        "TEC"
        "TECS"
        "Tec"
        "tec"
        "'"
        "("
        ")"
        "-"
        "-S"
        "S"
        "S-"
        "SS"
        "SSS"
        "Ss"
        "Ss-"
        "s"
        "s-"
        "ss"
        "U3"
        "U6"
        "u6"
        "SNORA70"
        "U2"
        "U8"
      ]
      # The following are the relevant sections for disease/target associations as described in PMID28587637
      sections_of_interest: [
        "title"
        "abstract"
        "intro"
        "case"
        "figure"
        "table"
        "discuss"
        "concl"
        "results"
        "appendix"
        "other"
      ]
      print_metrics: true
    }
    embedding: {
      model_configuration: {
        window_size: 10
        num_partitions: 16
        max_iter: 3
        min_count: 1
        step_size: 0.02
      }
    }
  }

  target_engine: {
    input: {
      targets: ${steps.target.output.target}
      molecule: ${steps.drug.output.drug}
      mechanism_of_action: ${steps.drug.output.mechanism_of_action}
      mouse_phenotypes: {
        format: "json"
        path: ${common.path}"/input/mouse_phenotype/mouse_phenotypes.json.gz"
      }
      hpa_data: {
        format: "json"
        path: ${common.path}"/input/target_engine/proteinatlas.json.gz"
      }
      uniprot_slterms: {
        format: "csv"
        path: ${common.path}"/input/target_engine/uniprot_locations.tsv.gz"
        options: [
          { k: "sep",    v: "\t" }
          { k: "header", v: true }
        ]
      }
      mouse_pheno_scores: {
        format: "csv"
        path: ${common.path}"/input/target_engine/mouse_pheno_scores.csv"
        options: [
          { k: "sep",         v: ","  }
          { k: "header",      v: true }
          { k: "inferSchema", v: true }
        ]
      }
    }
    output: {
      target_engine: {
        format: ${common.output_format}
        path: ${common.output_path}"/output/target_prioritisation"
      }
    }
  }
}
