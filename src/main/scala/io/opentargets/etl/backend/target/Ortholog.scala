package io.opentargets.etl.backend.target

import com.typesafe.scalalogging.LazyLogging
import org.apache.spark.sql.functions.{array_contains, broadcast, col, typedLit, when}
import org.apache.spark.sql.types.DoubleType
import org.apache.spark.sql.{DataFrame, Dataset, SparkSession, functions}

/** Maps orthologs to ensembl human gene ids */
object Ortholog extends LazyLogging {

  /** @param homologyDict
    *   Ensembl dictionary of species:
    *   ftp://ftp.ensembl.org/pub/release-100/species_EnsemblVertebrates.txt
    * @param codingProteins
    *   Ensembl human genes coding protein and nont coding RNA from
    *   ftp://ftp.ensembl.org/pub/release-104/tsv/ensembl-compara/homologies/homo_sapiens/Compara.104.protein_default.homologies.tsv.gz
    *   ftp://ftp.ensembl.org/pub/release-104/tsv/ensembl-compara/homologies/homo_sapiens/Compara.104.ncrna_default.homologies.tsv.gz
    * @param homologyGeneDict
    *   mapping of gene_id to gene_name for homology genes. File generated by PIS.
    * @param targetSpecies
    *   List of whitelisted species taken from the configuration file.
    * @return
    */
  def apply(
      homologyDict: DataFrame,
      codingProteins: DataFrame,
      homologyGeneDict: DataFrame,
      targetSpecies: List[String]
  )(implicit sparkSession: SparkSession): Dataset[Ortholog] = {
    import sparkSession.implicits._
    logger.info("Processing homologs.")

    val priority =
      targetSpecies.map(_.takeWhile(_.isDigit)).zipWithIndex.toDF("speciesId", "priority")

    val homoDict = homologyDict
      .select(
        col("#name").as("name"),
        col("species").as("speciesName"),
        col("taxonomy_id"),
        typedLit(targetSpecies.flatMap(_.split("-").headOption)).as("whitelist")
      )
      .filter(array_contains(col("whitelist"), col("taxonomy_id")))

    val homoGeneDictDf =
      homologyGeneDict
        .select(
          col("id") as "homology_gene_stable_id",
          when(col("name").isNotNull && col("name") =!= "", col("name"))
            .otherwise(col("id")) as "targetGeneSymbol"
        )

    val speciesOfReference = "homo_sapiens"

    // get the ones for homo_sapiens
    val homoSapiensHomologies = codingProteins.where('species === speciesOfReference)

    // Add missed homologies to homoSapiens homologies
    val allHomologies =
      homoSapiensHomologies
        .union(
          codingProteins
            .where(
              // get the paralogs
              ('species === speciesOfReference
                and ('homology_type === "other_paralog" or 'homology_type === "within_species_paralog"))
              // get all homologies
                or ('species =!= speciesOfReference and 'homology_species === speciesOfReference)
            )
            // swap related columns
            .select(
              'homology_gene_stable_id.alias("gene_stable_id"),
              'homology_protein_stable_id.alias("protein_stable_id"),
              'homology_species.alias("species"),
              'homology_identity.alias("identity"),
              'homology_type,
              'gene_stable_id.alias("homology_gene_stable_id"),
              'protein_stable_id.alias("homology_protein_stable_id"),
              'species.alias("homology_species"),
              'identity.alias("homology_identity"),
              'dn,
              'ds,
              'goc_score,
              'wga_coverage,
              'is_high_confidence,
              'homology_id
            )
        )

    val homoDF = allHomologies
      .join(homoDict, col("homology_species") === homoDict("speciesName"))
      .join(homoGeneDictDf, Seq("homology_gene_stable_id"), "left_outer")
      .select(
        col("gene_stable_id").as("id"),
        col("taxonomy_id").as("speciesId"),
        col("name").as("speciesName"),
        col("homology_type").as("homologyType"),
        col("homology_gene_stable_id").as("targetGeneId"),
        col("is_high_confidence").as("isHighConfidence"),
        col("targetGeneSymbol"),
        col("identity").cast(DoubleType).as("queryPercentageIdentity"),
        col("homology_identity")
          .cast(DoubleType)
          .as("targetPercentageIdentity")
      )
      .join(broadcast(priority), Seq("speciesId"), "left_outer")
      .as[Ortholog]

    homoDF
  }

}

case class Ortholog(
    speciesId: String,
    speciesName: String,
    homologyType: String,
    targetGeneId: String,
    targetGeneSymbol: String,
    isHighConfidence: String,
    queryPercentageIdentity: Double,
    targetPercentageIdentity: Double,
    priority: Int
)
